object SnippetsMainFrm: TSnippetsMainFrm
  Left = 355
  Height = 581
  Top = 301
  Width = 987
  HorzScrollBar.Page = 805
  VertScrollBar.Page = 160
  AutoScroll = True
  Caption = 'Code Librarian'
  ClientHeight = 581
  ClientWidth = 987
  Menu = mnuMain
  OnClose = FormClose
  LCLVersion = '3.6.0.0'
  object ToolBar1: TToolBar
    Left = 0
    Height = 40
    Top = 0
    Width = 987
    AutoSize = True
    ButtonHeight = 36
    ButtonWidth = 22
    Caption = 'tlbMain'
    EdgeBorders = [ebTop, ebBottom]
    Images = imlMain
    ParentShowHint = False
    ShowCaptions = True
    ShowHint = True
    TabOrder = 0
    object btnFileOpen: TToolButton
      Left = 1
      Top = 2
      Action = actFileOpen
      AutoSize = True
    end
    object btnFolderRootNew: TToolButton
      Left = 50
      Top = 2
      Action = actFolderRootNew
      AutoSize = True
    end
    object btnFolderNew: TToolButton
      Left = 119
      Top = 2
      Action = actFolderNew
      AutoSize = True
    end
    object ToolButton4: TToolButton
      Left = 249
      Height = 36
      Top = 2
      Caption = 'ToolButton4'
      Style = tbsDivider
      Wrap = True
    end
    object btnEditCopy: TToolButton
      Left = 254
      Top = 2
      Action = actEditCopy
      AutoSize = True
    end
    object btnEditCut: TToolButton
      Left = 290
      Top = 2
      Action = actEditCut
      AutoSize = True
    end
    object btnEditPaste: TToolButton
      Left = 317
      Top = 2
      Action = actEditPaste
      AutoSize = True
    end
    object btnEditUndo: TToolButton
      Left = 353
      Top = 2
      Action = actEditUndo
      AutoSize = True
    end
    object ToolButton9: TToolButton
      Left = 390
      Height = 36
      Top = 2
      Caption = 'ToolButton9'
      Style = tbsDivider
      Wrap = True
    end
    object btnExpandAll: TToolButton
      Left = 472
      Top = 2
      Action = actExpandAll
      AutoSize = True
    end
    object btnCollapseAll: TToolButton
      Left = 536
      Top = 2
      Action = actCollapseAll
      AutoSize = True
    end
    object btnSnippetNew: TToolButton
      Left = 160
      Top = 2
      Action = actSnippetNew
      AutoSize = True
    end
    object ToolButton1: TToolButton
      Left = 208
      Top = 2
      Action = actDelete
      AutoSize = True
    end
    object ToolButton2: TToolButton
      Left = 395
      Top = 2
      AutoSize = True
      Caption = 'Language'
      DropdownMenu = pmnuTree
      ImageIndex = 40
      Style = tbsDropDown
    end
    object ToolButton3: TToolButton
      Left = 467
      Height = 36
      Top = 2
      Caption = 'ToolButton3'
      Style = tbsDivider
    end
    object Panel1: TPanel
      Left = 611
      Height = 36
      Top = 2
      Width = 194
      BevelOuter = bvNone
      ClientHeight = 36
      ClientWidth = 194
      TabOrder = 0
      object TreeFilterEdit1: TTreeFilterEdit
        Left = 0
        Height = 36
        Top = 0
        Width = 194
        ButtonWidth = 23
        Align = alClient
        NumGlyphs = 1
        MaxLength = 0
        TabOrder = 0
        FilteredTreeview = tvData
      end
    end
    object ToolButton5: TToolButton
      Left = 606
      Height = 36
      Top = 2
      Caption = 'ToolButton5'
      Style = tbsDivider
    end
  end
  object StatusBar1: TStatusBar
    Left = 0
    Height = 23
    Top = 558
    Width = 987
    Panels = <    
      item
        Width = 278
      end    
      item
        Width = 50
      end>
    SimplePanel = False
  end
  object Splitter1: TSplitter
    Left = 259
    Height = 518
    Top = 40
    Width = 5
    Beveled = True
    OnMoved = Splitter1Moved
  end
  inline snEditor: TSynEdit
    Left = 264
    Height = 518
    Top = 40
    Width = 723
    Align = alClient
    Enabled = False
    Font.Height = -13
    Font.Name = 'Courier New'
    Font.Pitch = fpFixed
    Font.Quality = fqCleartypeNatural
    ParentColor = False
    ParentFont = False
    TabOrder = 3
    OnExit = snEditorExit
    BorderStyle = bsNone
    ExtraLineSpacing = 1
    Gutter.Color = 11468795
    Gutter.Width = 33
    Gutter.MouseActions = <>
    RightGutter.Width = 0
    RightGutter.MouseActions = <>
    Highlighter = shlPascal
    Keystrokes = <    
      item
        Command = ecUp
        ShortCut = 38
      end    
      item
        Command = ecSelUp
        ShortCut = 8230
      end    
      item
        Command = ecScrollUp
        ShortCut = 16422
      end    
      item
        Command = ecDown
        ShortCut = 40
      end    
      item
        Command = ecSelDown
        ShortCut = 8232
      end    
      item
        Command = ecScrollDown
        ShortCut = 16424
      end    
      item
        Command = ecLeft
        ShortCut = 37
      end    
      item
        Command = ecSelLeft
        ShortCut = 8229
      end    
      item
        Command = ecWordLeft
        ShortCut = 16421
      end    
      item
        Command = ecSelWordLeft
        ShortCut = 24613
      end    
      item
        Command = ecRight
        ShortCut = 39
      end    
      item
        Command = ecSelRight
        ShortCut = 8231
      end    
      item
        Command = ecWordRight
        ShortCut = 16423
      end    
      item
        Command = ecSelWordRight
        ShortCut = 24615
      end    
      item
        Command = ecPageDown
        ShortCut = 34
      end    
      item
        Command = ecSelPageDown
        ShortCut = 8226
      end    
      item
        Command = ecPageBottom
        ShortCut = 16418
      end    
      item
        Command = ecSelPageBottom
        ShortCut = 24610
      end    
      item
        Command = ecPageUp
        ShortCut = 33
      end    
      item
        Command = ecSelPageUp
        ShortCut = 8225
      end    
      item
        Command = ecPageTop
        ShortCut = 16417
      end    
      item
        Command = ecSelPageTop
        ShortCut = 24609
      end    
      item
        Command = ecLineStart
        ShortCut = 36
      end    
      item
        Command = ecSelLineStart
        ShortCut = 8228
      end    
      item
        Command = ecEditorTop
        ShortCut = 16420
      end    
      item
        Command = ecSelEditorTop
        ShortCut = 24612
      end    
      item
        Command = ecLineEnd
        ShortCut = 35
      end    
      item
        Command = ecSelLineEnd
        ShortCut = 8227
      end    
      item
        Command = ecEditorBottom
        ShortCut = 16419
      end    
      item
        Command = ecSelEditorBottom
        ShortCut = 24611
      end    
      item
        Command = ecToggleMode
        ShortCut = 45
      end    
      item
        Command = ecCopy
        ShortCut = 16429
      end    
      item
        Command = ecPaste
        ShortCut = 8237
      end    
      item
        Command = ecDeleteChar
        ShortCut = 46
      end    
      item
        Command = ecCut
        ShortCut = 8238
      end    
      item
        Command = ecDeleteLastChar
        ShortCut = 8
      end    
      item
        Command = ecDeleteLastChar
        ShortCut = 8200
      end    
      item
        Command = ecDeleteLastWord
        ShortCut = 16392
      end    
      item
        Command = ecUndo
        ShortCut = 32776
      end    
      item
        Command = ecRedo
        ShortCut = 40968
      end    
      item
        Command = ecLineBreak
        ShortCut = 13
      end    
      item
        Command = ecSelectAll
        ShortCut = 16449
      end    
      item
        Command = ecCopy
        ShortCut = 16451
      end    
      item
        Command = ecBlockIndent
        ShortCut = 24649
      end    
      item
        Command = ecLineBreak
        ShortCut = 16461
      end    
      item
        Command = ecInsertLine
        ShortCut = 16462
      end    
      item
        Command = ecDeleteWord
        ShortCut = 16468
      end    
      item
        Command = ecBlockUnindent
        ShortCut = 24661
      end    
      item
        Command = ecPaste
        ShortCut = 16470
      end    
      item
        Command = ecCut
        ShortCut = 16472
      end    
      item
        Command = ecDeleteLine
        ShortCut = 16473
      end    
      item
        Command = ecDeleteEOL
        ShortCut = 24665
      end    
      item
        Command = ecUndo
        ShortCut = 16474
      end    
      item
        Command = ecRedo
        ShortCut = 24666
      end    
      item
        Command = ecGotoMarker0
        ShortCut = 16432
      end    
      item
        Command = ecGotoMarker1
        ShortCut = 16433
      end    
      item
        Command = ecGotoMarker2
        ShortCut = 16434
      end    
      item
        Command = ecGotoMarker3
        ShortCut = 16435
      end    
      item
        Command = ecGotoMarker4
        ShortCut = 16436
      end    
      item
        Command = ecGotoMarker5
        ShortCut = 16437
      end    
      item
        Command = ecGotoMarker6
        ShortCut = 16438
      end    
      item
        Command = ecGotoMarker7
        ShortCut = 16439
      end    
      item
        Command = ecGotoMarker8
        ShortCut = 16440
      end    
      item
        Command = ecGotoMarker9
        ShortCut = 16441
      end    
      item
        Command = ecSetMarker0
        ShortCut = 24624
      end    
      item
        Command = ecSetMarker1
        ShortCut = 24625
      end    
      item
        Command = ecSetMarker2
        ShortCut = 24626
      end    
      item
        Command = ecSetMarker3
        ShortCut = 24627
      end    
      item
        Command = ecSetMarker4
        ShortCut = 24628
      end    
      item
        Command = ecSetMarker5
        ShortCut = 24629
      end    
      item
        Command = ecSetMarker6
        ShortCut = 24630
      end    
      item
        Command = ecSetMarker7
        ShortCut = 24631
      end    
      item
        Command = ecSetMarker8
        ShortCut = 24632
      end    
      item
        Command = ecSetMarker9
        ShortCut = 24633
      end    
      item
        Command = EcFoldLevel1
        ShortCut = 41009
      end    
      item
        Command = EcFoldLevel2
        ShortCut = 41010
      end    
      item
        Command = EcFoldLevel1
        ShortCut = 41011
      end    
      item
        Command = EcFoldLevel1
        ShortCut = 41012
      end    
      item
        Command = EcFoldLevel1
        ShortCut = 41013
      end    
      item
        Command = EcFoldLevel6
        ShortCut = 41014
      end    
      item
        Command = EcFoldLevel7
        ShortCut = 41015
      end    
      item
        Command = EcFoldLevel8
        ShortCut = 41016
      end    
      item
        Command = EcFoldLevel9
        ShortCut = 41017
      end    
      item
        Command = EcFoldLevel0
        ShortCut = 41008
      end    
      item
        Command = EcFoldCurrent
        ShortCut = 41005
      end    
      item
        Command = EcUnFoldCurrent
        ShortCut = 41003
      end    
      item
        Command = EcToggleMarkupWord
        ShortCut = 32845
      end    
      item
        Command = ecNormalSelect
        ShortCut = 24654
      end    
      item
        Command = ecColumnSelect
        ShortCut = 24643
      end    
      item
        Command = ecLineSelect
        ShortCut = 24652
      end    
      item
        Command = ecTab
        ShortCut = 9
      end    
      item
        Command = ecShiftTab
        ShortCut = 8201
      end    
      item
        Command = ecMatchBracket
        ShortCut = 24642
      end    
      item
        Command = ecColSelUp
        ShortCut = 40998
      end    
      item
        Command = ecColSelDown
        ShortCut = 41000
      end    
      item
        Command = ecColSelLeft
        ShortCut = 40997
      end    
      item
        Command = ecColSelRight
        ShortCut = 40999
      end    
      item
        Command = ecColSelPageDown
        ShortCut = 40994
      end    
      item
        Command = ecColSelPageBottom
        ShortCut = 57378
      end    
      item
        Command = ecColSelPageUp
        ShortCut = 40993
      end    
      item
        Command = ecColSelPageTop
        ShortCut = 57377
      end    
      item
        Command = ecColSelLineStart
        ShortCut = 40996
      end    
      item
        Command = ecColSelLineEnd
        ShortCut = 40995
      end    
      item
        Command = ecColSelEditorTop
        ShortCut = 57380
      end    
      item
        Command = ecColSelEditorBottom
        ShortCut = 57379
      end>
    MouseActions = <>
    MouseTextActions = <>
    MouseSelActions = <>
    Lines.Strings = (
      '{$IFDEF VER140}'
      '{$DEFINE D4Plus}'
      '{$ENDIF}'
      ''
      'uses'
      #9'Windows;'
      ''
      'const'
      #9'TIME_ZONE_ID_STANDARD = 1;'
      #9'TIME_ZONE_ID_DAYLIGHT = 2;'
      'type'
      #9'LongInt = Integer;'
      ''
      'ResourceString'
      #9'rsInvalidDate = ''Invalid Date'';'
      #9'rsInvalidTime = ''Invalid Time'';'
      #9'rsInvalidDateTime = ''Invalid Date/Time'';'
      ''
      'const'
      #9'//: Fraction of a TDateTime that represents One Hour.'
      #9'OneDTHour = 1 / 24;'
      ''
      'var'
      #9'ESB2DigitCutOff: Word = 1920;'
      ''
      '{--- Current Date ---}'
      '{: A Speed Optimised Routine to get the Current Date. Time Portion is Zero.'
      #9'@cat DTMath}'
      'function OptDate: TDateTime;'
      ''
      '{--- Conversions ---}'
      ''
      '{: A Speed Optimised DecodeDate developed by Ken Otto that is many times faster'
      #9'than the once included in SysUtils. If you need Words rather than Integers'
      #9'use the slightly slower OptDecodeDateW.'
      #9'@cat DTConv}'
      'procedure OptDecodeDateI (const DT: TDateTime; out Year, Month, Day: Integer);'
      'procedure OptDecodeDateW (const DT: TDateTime; out Year, Month, Day: Word);'
      'function OptEncodeDateI (Year, Month, Day: Integer): TDateTime;'
      'function OptEncodeDateW (Year, Month, Day: Word): TDateTime;'
      'function OptDate2Year (const DT: TDateTime) : Word;'
      'function OptDate2Month (const DT: TDateTime) : Word;'
      'function OptDate2Day (const DT: TDateTime) : Word;'
      ''
      'function Time2Str (const DT: TDateTime): String;'
      ''
      'function Str2Date (S: String): TDateTime;'
      ''
      'function Date2ShortMonth (const DT: TDateTime): string;'
      ''
      '{: Returns the Long Day of Week Description for the supplied Date. Relies'
      #9'on Regional Settings.'
      #9'@param DT Date/Time to convert.'
      #9'@returns the Long Day of Week Name for the given Date.'
      #9'@cat DTConv'
      '}'
      'function Date2LongDOW (const DT: TDateTime): string;'
      'function Secs2Mins (const Value: Extended): Extended;'
      ''
      #9'ie #MM/DD/YYYY#.'
      #9'@param DT Date to process.'
      #9'@cat DTConv'
      '}'
      'function Date2AccessStr (const DT: TDateTime): String;'
      'function Date2ANSISQLStr (const DT: TDateTime): String;'
      ''
      'implementation'
      ''
      'uses'
      #9'{$IFDEF UseESBRoutines}'
      #9'ESBRtns,'
      #9'{$ENDIF}'
      #9'SysUtils;'
      ''
      '{$IFNDEF UseESBRoutines}'
      '// --- Routines taken from ESBRoutines ---'
      ''
      'function LInt2EStr (const L: LongInt): String;'
      'begin'
      #9'try'
      #9#9'Result := IntToStr (L);'
      #9'except'
      #9#9'Result := '''';'
      #9'end;'
      'end;'
      ''
      'function LeftStr (const S : string; const N : Integer): string;'
      'begin'
      #9'Result := Copy (S, 1, N);'
      'end;'
      ''
      'function RightAfterStr (const S : String; const N : Integer): String;'
      'begin'
      #9'Result := Copy (S, N + 1, Length (S) - N );'
      'end;'
      ''
      'function FillStr (const Ch : Char; const N : Integer): string;'
      'begin'
      #9'SetLength (Result, N);'
      #9'FillChar (Result [1], N, Ch);'
      'end;'
      ''
      'function PadChLeftStr (const S : string; const Ch : Char;'
      #9'const Len : Integer): string;'
      'var'
      #9'N: Integer;'
      'begin'
      #9'N := Length (S);'
      #9'if N < Len then'
      #9#9'Result := FillStr (Ch, Len - N) + S'
      #9'else'
      #9#9'Result := S;'
      'end;'
      ''
      'function LInt2ZStr (const L: LongInt; const Len: Byte): String;'
      'begin'
      #9'Result := LInt2EStr (L);'
      #9'Result := PadChLeftStr (LeftStr (Result, Len), ''0'', Len);'
      'end;'
      ''
      'function ReplaceChStr (const S : string;'
      #9'const OldCh, NewCh : Char): string;'
      'var'
      #9'I: Integer;'
      'begin'
      #9'Result := S;'
      #9'if OldCh = NewCh then'
      #9#9'Exit;'
      #9'for I := 1 to Length (S) do'
      #9#9'if S [I] = OldCh then'
      #9#9#9'Result [I] := NewCh;'
      'end;'
      ''
      'function Str2Ext (const S: String): Extended;'
      'begin'
      #9'try'
      #9#9'Result := StrToFloat (S);'
      #9'except'
      #9#9'Result := 0;'
      #9'end;'
      'end;'
      ''
      'function Str2Lint (const S: String): LongInt;'
      'begin'
      #9'try'
      #9#9'Result := StrToInt (S);'
      #9'except'
      #9#9'Result := 0;'
      #9'end;'
      'end;'
      '// --- End Routines taken from ESBRoutines ---'
      '{$ENDIF}'
      ''
      'function IsLeapYear (Year: Word): Boolean;'
      'begin'
      #9'Result := ((Year and 3) = 0) and ((Year mod 100 > 0) or (Year mod 400 = 0))'
      'end;'
      ''
      'function Date2Str (const DT: TDateTime): String;'
      'begin'
      #9'try'
      #9#9'if abs (DT) < OneDTMillisecond then'
      #9#9#9'Result := '''''
      #9#9'else'
      #9#9#9'Result := DateToStr (DT);'
      #9'except'
      #9#9'Result := '''';'
      #9'end;'
      'end;'
      ''
      'function Time2Str (const DT: TDateTime): String;'
      'var'
      #9'Hrs, Mins, Secs, MSecs: Word;'
      'begin'
      #9'if abs (DT) < OneDTMillisecond then'
      #9#9'Result := '''''
      #9'else'
      #9#9'try'
      #9#9#9'DecodeTime (DT, Hrs, Mins, Secs, MSecs);'
      #9#9#9'Result := LInt2EStr (Hrs) + TimeSeparator'
      #9#9#9#9'+ LInt2ZStr (Mins, 2);'
      #9#9'except'
      #9#9#9'Result := '''';'
      #9#9'end;'
      'end;'
      ''
      'function Date2Year (const DT: TDateTime): Word;'
      'var'
      #9'D, M: Word;'
      'begin'
      #9'OptDecodeDateW (DT, Result, M, D);'
      'end;'
      ''
      'function Date2Month (const DT: TDateTime): Word;'
      'var'
      #9'D, Y : Word;'
      'begin'
      #9'OptDecodeDateW (DT, Y, Result, D);'
      'end;'
      ''
      'function Date2Day (const DT: TDateTime): Word;'
      'var'
      #9'M, Y : Word;'
      'begin'
      #9'OptDecodeDateW (DT, Y, M, Result);'
      'end;'
      ''
      'function Time2Hr (const DT: TDateTime): Word;'
      'var'
      #9'Min, Sec, MSec: Word;'
      'begin'
      #9'DecodeTime (DT, Result, Min, Sec, MSec);'
      'end;'
      ''
      'function Time2Min (const DT: TDateTime): Word;'
      'var'
      #9'Hr, Sec, MSec: Word;'
      'begin'
      #9'DecodeTime (DT, Hr, Result, Sec, MSec);'
      'end;'
      ''
      'function Time2Sec (const DT: TDateTime): Word;'
      'var'
      #9'Hr, Min, MSec: Word;'
      'begin'
      #9'DecodeTime (DT, Hr, Min, Result, MSec);'
      'end;'
      ''
      'function Time2MSec (const DT: TDateTime): Word;'
      'var'
      #9'Hr, Min, Sec: Word;'
      'begin'
      #9'DecodeTime (DT, Hr, Min, Sec, Result);'
      'end;'
      ''
      'function MinutesApart (const DT1, DT2: TDateTime): Word;'
      'var'
      #9'Hr1, Min1, Sec1, MSec1: Word;'
      #9'Hr2, Min2, Sec2, MSec2: Word;'
      'begin'
      #9'DecodeTime (DT1, Hr1, Min1, Sec1, MSec1);'
      #9'DecodeTime (DT2, Hr2, Min2, Sec2, MSec2);'
      #9'if Min2 < Min1 then'
      #9'begin'
      #9#9'Min2 := Min2 + 60;'
      #9#9'Dec (Hr2);'
      #9'end;'
      #9'if Hr1 > Hr2 then'
      #9#9'Hr2 := Hr2 + 24;'
      #9'Result := (Hr2 - Hr1) * 60 + (Min2 - Min1);'
      'end;'
      ''
      'function TimeApartInFortnights (const DT1, DT2: TDateTime): Extended;'
      'begin'
      #9'if SameDateTime (DT1, DT2) then'
      #9#9'Result := 0'
      #9'else'
      #9#9'Result := (DT2 - DT1) / 14;'
      'end;'
      ''
      'function TimeApartInWeeks (const DT1, DT2: TDateTime): Extended;'
      'begin'
      #9'if SameDateTime (DT1, DT2) then'
      #9#9'Result := 0'
      #9'else'
      #9#9'Result := (DT2 - DT1) / 7;'
      'end;'
      ''
      'function TimeApartInDays (const DT1, DT2: TDateTime): Extended;'
      'begin'
      #9'if SameDateTime (DT1, DT2) then'
      #9#9'Result := 0'
      #9'else'
      #9#9'Result := (DT2 - DT1);'
      'end;'
      ''
      'function TimeApartInHrs (const DT1, DT2: TDateTime): Extended;'
      'begin'
      #9'if SameDateTime (DT1, DT2) then'
      #9#9'Result := 0'
      #9'else'
      #9#9'Result := (DT2 - DT1) * 24;'
      'end;'
      ''
      'function TimeApartInMins (const DT1, DT2: TDateTime): Extended;'
      'begin'
      #9'if SameDateTime (DT1, DT2) then'
      #9#9'Result := 0'
      #9'else'
      #9#9'Result := (DT2 - DT1) * 24 * 60;'
      'end;'
      ''
      'function TimeApartInSecs (const DT1, DT2: TDateTime): Extended;'
      'begin'
      #9'if SameDateTime (DT1, DT2) then'
      #9#9'Result := 0'
      #9'else'
      #9#9'Result := (DT2 - DT1) * 24 * 60 * 60;'
      'end;'
      ''
      'function MS2TimeStr (const MS: LongInt): String;'
      'var'
      #9'L: LongInt;'
      'begin'
      #9'L := MS;'
      #9'Result := ''.'' + LInt2ZStr (L mod 1000, 3);'
      #9'L := L div 1000;'
      #9'Result := '':'' + LInt2ZStr (L mod 60, 2) + Result;'
      #9'L := L div 60;'
      #9'Result := '':'' + LInt2ZStr (L mod 60, 2) + Result;'
      #9'L := L div 60;'
      #9'Result := LInt2EStr (L) + Result ;'
      'end;'
      ''
      'function AdjustDateYear (const D: TDateTime; const Year: Word): TDateTime;'
      'var'
      #9'Day, Month, OldYear: Word;'
      'begin'
      #9'OptDecodeDateW (D, OldYear, Month, Day);'
      #9'if Year = OldYear then'
      #9'begin'
      #9#9'Result := Int (D);'
      #9#9'Exit;'
      #9'end;'
      #9'if not IsLeapYear (Year) and (Month = 2) and (Day = 29) then'
      #9'begin'
      #9#9'Month := 3;'
      #9#9'Day := 1;'
      #9'end;'
      #9'Result := OptEncodeDateW (Year, Month, Day);'
      'end;'
      ''
      'function GetDateTimeStamp: String;'
      'var'
      #9'DT: TDateTime;'
      #9'Year, Month, Day: Word;'
      #9'Hr, Min, Sec, MSec: Word;'
      'begin'
      #9'DT := Now;'
      #9'OptDecodeDateW (DT, Year, Month, Day);'
      #9'DecodeTime (DT, Hr, Min, Sec, MSec);'
      #9'Result := LInt2ZStr (Year, 4) + LInt2ZStr (Month, 2) +'
      #9#9'LInt2ZStr (Day, 2) + ''-'' + LInt2ZStr (Hr, 2) +'
      #9#9'LInt2ZStr (Min, 2) + LInt2ZStr (Sec, 2) + Lint2ZStr (MSec, 3);'
      'end;'
      ''
      'function Str2Time (S: String): TDateTime;'
      'begin'
      #9'if S = '''' then'
      #9'begin'
      #9#9'Result := 0.0;'
      #9#9'Exit;'
      #9'end;'
      ''
      #9'try'
      #9#9'// Allow ''.'' and '':'' as valid alternatives for TimeSeparator'
      #9#9'S := ReplaceChStr ( S, ''.'', TimeSeparator);'
      #9#9'S := ReplaceChStr ( S, '':'', TimeSeparator);'
      ''
      #9#9'// Remove trailing Separator if any'
      #9#9'if S [Length (S)] = TimeSeparator then'
      #9#9'begin'
      #9#9#9'S := LeftStr (S, Length (S) - 1);'
      #9#9#9'if S = '''' then'
      #9#9#9'begin'
      #9#9#9#9'Result := 0.0;'
      #9#9#9#9'Exit;'
      #9#9#9'end;'
      #9#9'end;'
      ''
      #9#9'//Frac ensures the Date Component is 0'
      #9#9'Result := Frac (StrToTime (S));'
      #9'except'
      #9#9'Result := 0.0;'
      #9'end;'
      'end;'
      ''
      'type'
      #9'TDateOrder = (doMDY, doDMY, doYMD, doUnknown);'
      ''
      'function GetDateOrder (const DateFormat: string): TDateOrder;'
      'var'
      #9'I: Integer;'
      'begin'
      #9'Result := doMDY;'
      #9'I := 1;'
      #9'while I <= Length(DateFormat) do'
      #9'begin'
      #9#9'case char (Ord (DateFormat[I]) and $DF) of'
      #9#9#9'''E'': Result := doYMD;'
      #9#9#9'''Y'': Result := doYMD;'
      #9#9#9'''M'': Result := doMDY;'
      #9#9#9'''D'': Result := doDMY;'
      #9#9'else'
      #9#9#9'Inc(I);'
      #9#9#9'Continue;'
      #9#9'end;'
      #9#9'Exit;'
      #9'end;'
      #9'Result := doMDY;'
      'end;'
      ''
      '{---}'
      ''
      'function Str2Date (S: String): TDateTime;'
      'var'
      #9'P1, P2: Integer;'
      #9'Yr: Word;'
      #9'DateOrder: TDateOrder;'
      'begin'
      #9'if S = '''' then'
      #9'begin'
      #9#9'Result := 0.0;'
      #9#9'Exit;'
      #9'end;'
      ''
      #9'try'
      #9#9'// Allow ''-'' and ''/'' as valid alternatives for DateSeparator'
      #9#9'S := ReplaceChStr ( S, ''-'', DateSeparator);'
      #9#9'S := ReplaceChStr ( S, ''/'', DateSeparator);'
      ''
      #9#9'// Remove trailing Separator if any'
      #9#9'if S [Length (S)] = DateSeparator then'
      #9#9'begin'
      #9#9#9'S := LeftStr (S, Length (S) - 1);'
      #9#9#9'if S = '''' then'
      #9#9#9'begin'
      #9#9#9#9'Result := 0.0;'
      #9#9#9#9'Exit;'
      #9#9#9'end;'
      #9#9'end;'
      ''
      #9#9'DateOrder := GetDateOrder(ShortDateFormat);'
      #9#9'P1 := Pos (DateSeparator, S);'
      #9#9'if P1 > 0 then // If at least one Date Separator'
      #9#9'begin'
      #9#9#9'P2 := Pos (DateSeparator, Copy (S, P1 + 1, Length (S) - P1));'
      #9#9#9'if P2 > 0 then // If 2 Date Separators'
      #9#9#9'begin'
      #9#9#9#9'// Get Components'
      #9#9#9#9'case DateOrder of'
      #9#9#9#9#9'doMDY, doDMY:'
      #9#9#9#9#9'begin'
      #9#9#9#9#9#9'Yr := Str2LInt (Copy (S, P1 + P2 + 1, Length (S) - (P1 + P2)));'
      #9#9#9#9#9'end;'
      #9#9#9#9'else'
      #9#9#9#9#9'begin'
      #9#9#9#9#9#9'Yr := Str2Lint (LeftStr (S, P1 - 1));'
      #9#9#9#9#9'end;'
      #9#9#9#9'end;'
      ''
      #9#9#9#9'if Yr < 100 then // If 2 Digit'
      #9#9#9#9'begin'
      #9#9#9#9#9'case ESB2DigitYr of'
      #9#9#9#9#9#9'// edyNone - Nothing has to be done'
      #9#9#9#9#9#9'edyCutOff: // Process using ESB2DigitCutOff'
      #9#9#9#9#9#9'begin'
      #9#9#9#9#9#9#9'if 1900 + Yr < ESB2DigitCutOff then'
      #9#9#9#9#9#9#9#9'Yr := 2000 + Yr'
      #9#9#9#9#9#9#9'else'
      #9#9#9#9#9#9#9#9'Yr := 1900 + Yr'
      #9#9#9#9#9#9'end;'
      #9#9#9#9#9#9'edyHistoric: // Take Yr as this year or earlier'
      #9#9#9#9#9#9'begin'
      #9#9#9#9#9#9#9'if 2000 + Yr <= ThisYear then'
      #9#9#9#9#9#9#9#9'Yr := 2000 + Yr'
      #9#9#9#9#9#9#9'else'
      #9#9#9#9#9#9#9#9'Yr := 1900 + Yr;'
      #9#9#9#9#9#9'end;'
      #9#9#9#9#9'end;'
      #9#9#9#9'end;'
      #9#9#9#9#9'// Rebuild String'
      #9#9#9#9'case DateOrder of'
      #9#9#9#9#9'doMDY, doDMY:'
      #9#9#9#9#9'begin'
      #9#9#9#9#9#9'S := LeftStr (S, P1 + P2) + LInt2EStr (Yr);'
      #9#9#9#9#9'end;'
      #9#9#9#9#9'doYMD:'
      #9#9#9#9#9'begin'
      #9#9#9#9#9#9'S := LInt2EStr (Yr) + RightAfterStr (S, P1 - 1);'
      #9#9#9#9#9'end;'
      #9#9#9#9'end;'
      #9#9#9'end'
      #9#9#9'else'
      #9#9#9'begin'
      #9#9#9#9'// Assume This Year is implied'
      #9#9#9#9'case DateOrder of'
      #9#9#9#9#9'doMDY, doDMY:'
      #9#9#9#9#9'begin'
      #9#9#9#9#9#9'S := S + DateSeparator + LInt2EStr (ThisYear)'
      #9#9#9#9#9'end;'
      #9#9#9#9#9'doYMD:'
      #9#9#9#9#9'begin'
      #9#9#9#9#9#9'S := LInt2EStr (ThisYear) + DateSeparator + S;'
      #9#9#9#9#9'end;'
      #9#9#9#9'end;'
      #9#9#9'end;'
      #9#9'end'
      #9#9'else'
      #9#9'begin'
      #9#9#9'// Assume This Month and Year are implied'
      #9#9#9'case DateOrder of'
      #9#9#9#9'doDMY:'
      #9#9#9#9'begin'
      #9#9#9#9#9'S := S + DateSeparator + LInt2EStr (ThisMonth)'
      #9#9#9#9#9#9'+ DateSeparator + LInt2EStr (ThisYear);'
      #9#9#9#9'end;'
      #9#9#9#9'doMDY:'
      #9#9#9#9'begin'
      #9#9#9#9#9'S := LInt2EStr (ThisMonth) + DateSeparator + S'
      #9#9#9#9#9#9'+ DateSeparator + LInt2EStr (ThisYear);'
      #9#9#9#9'end;'
      #9#9#9#9'doYMD:'
      #9#9#9#9'begin'
      #9#9#9#9#9'S := LInt2EStr (ThisYear) + DateSeparator +'
      #9#9#9#9#9#9'LInt2EStr (ThisMonth) + DateSeparator + S;'
      #9#9#9#9'end;'
      #9#9#9'end;'
      #9#9'end;'
      ''
      #9#9'//Int ensures the fractional Component is 0'
      #9#9'Result := Int (StrToDate (S));'
      #9'except'
      #9#9'Result := 0.0;'
      #9'end;'
      'end;'
      ''
      'function Str2HistoricDate (S: String): TDateTime;'
      'var'
      #9'Hold: TESB2DigitYr;'
      'begin'
      #9'Hold := ESB2DigitYr;'
      #9'ESB2DigitYr := edyHistoric;'
      #9'Result := Str2Date (S);'
      #9'ESB2DigitYr := Hold;'
      'end;'
      ''
      'function Str2CutoffDate (S: string; const CutOff: Word): TDateTime;'
      'var'
      #9'Hold1: TESB2DigitYr;'
      #9'Hold2: Word;'
      'begin'
      #9'Hold1 := ESB2DigitYr;'
      #9'Hold2 := ESB2DigitCutOff;'
      #9'ESB2DigitYr := edyCutOff;'
      #9'ESB2DigitCutOff := CutOff;'
      #9'Result := Str2Date (S);'
      #9'ESB2DigitYr := Hold1;'
      #9'ESB2DigitCutOff := Hold2;'
      'end;'
      ''
      'function AddSecs (const DT: TDateTime; const Secs: Extended): TDateTime;'
      'begin'
      #9'Result := DT + Secs * OneDTSecond'
      'end;'
      ''
      'function AddMins (const DT: TDateTime; const Mins: Extended): TDateTime;'
      'begin'
      #9'Result := DT + Mins * OneDTMinute'
      'end;'
      ''
      'function AddHrs (const DT: TDateTime; const Hrs: Extended): TDateTime;'
      'begin'
      #9'Result := DT + Hrs * OneDTHour;'
      'end;'
      ''
      'function AddWeeks (const DT: TDateTime; const Weeks: Extended): TDateTime;'
      'begin'
      #9'Result := DT + Weeks * 7;'
      'end;'
      ''
      'function AddFortnights (const DT: TDateTime; const FNights: Extended): TDateTime;'
      'begin'
      #9'Result := AddWeeks (DT, FNights * 2);'
      'end;'
      ''
      'function AddMonths (const DT: TDateTime; const Months: Extended): TDateTime;'
      'var'
      #9'Day, Month, Year: Word;'
      #9'IMonth: Integer;'
      'begin'
      #9'OptDecodeDateW (DT, Year, Month, Day);'
      #9'IMonth := Month + Trunc (Months);'
      ''
      #9'if IMonth > 12 then'
      #9'begin'
      #9#9'Year := Year + (IMonth - 1) div 12;'
      #9#9'IMonth := IMonth mod 12;'
      #9#9'if IMonth = 0 then'
      #9#9#9'IMonth := 12;'
      #9'end'
      #9'else if IMonth < 1 then'
      #9'begin'
      #9#9'Year := Year + (IMonth div 12) - 1; // sub years;'
      #9#9'IMonth := 12 - abs (IMonth) mod 12;'
      #9'end;'
      '     Month := IMonth;'
      ''
      #9'// Ensure Day of Month is valid'
      #9'if Month = 2 then'
      #9'begin'
      #9#9'if IsLeapYear (Year) and (Day > 29) then'
      #9#9#9'Day := 29'
      #9#9'else'#9'if not IsLeapYear (Year) and (Day > 28) then'
      #9#9#9'Day := 28;'
      #9'end'
      #9'else if (Month in [9, 4, 6, 11]) and (Day = 31) then'
      #9#9'Day := 30;'
      ''
      #9'Result := OptEncodeDateW (Year, Month, Day) + Frac (Months) * 30 +'
      #9#9'Frac (DT);'
      'end;'
      ''
      'function AddQuarters (const DT: TDateTime; const Qtrs: Extended): TDateTime;'
      'begin'
      #9'Result := AddMonths (DT, Qtrs * 3);'
      'end;'
      ''
      'function AddSemesters (const DT: TDateTime; const Sems: Extended): TDateTime;'
      'begin'
      #9'Result := AddMonths (DT, Sems * 6);'
      'end;'
      ''
      'function AddYrs (const DT: TDateTime; const Yrs: Extended): TDateTime;'
      'var'
      #9'Day, Month, Year: Word;'
      'begin'
      #9'OptDecodeDateW (DT, Year, Month, Day);'
      #9'Year := Year + Trunc (Yrs);'
      #9'if not IsLeapYear (Year) and (Month = 2) and (Day = 29) then'
      #9#9'Day := 28;'
      #9'Result := OptEncodeDateW (Year, Month, Day) + Frac (Yrs) * 365.25'
      #9#9'+ Frac (DT);'
      'end;'
      ''
      'function GetLocalTZBias: LongInt;'
      'var'
      #9'TZ : TTimeZoneInformation;'
      'begin'
      #9'case GetTimeZoneInformation (TZ) of'
      #9#9'TIME_ZONE_ID_STANDARD: Result := TZ.Bias + TZ.StandardBias;'
      #9#9'TIME_ZONE_ID_DAYLIGHT: Result := TZ.Bias + TZ.DaylightBias;'
      #9'else'
      #9#9'Result := TZ.Bias;'
      #9'end;'
      'end;'
      ''
      'function GetGMTTime (const DT: TDateTime): TDateTime;'
      'begin'
      #9'Result := DT + GetLocalTZBias * OneDTMinute;'
      'end;'
      ''
      'function GetLocalTime (const DT: TDateTime): TDateTime;'
      'begin'
      #9'Result := DT - GetLocalTZBias * OneDTMinute;'
      'end;'
      ''
      'function GetTimeZoneName: string;'
      'var'
      #9'TZ : TTimeZoneInformation;'
      'begin'
      #9'case GetTimeZoneInformation (TZ) of'
      #9#9'TIME_ZONE_ID_STANDARD: Result := WideCharToString (TZ.StandardName);'
      #9#9'TIME_ZONE_ID_DAYLIGHT: Result := WideCharToString (TZ.DaylightName);'
      #9'else'
      #9#9'Result := '''';'
      #9'end;'
      'end;'
      ''
      'function GetGMTDifference: string;'
      'var'
      #9'TZ : TTimeZoneInformation;'
      'begin'
      #9'GetTimeZoneInformation (TZ);'
      #9'if TZ.Bias = 0 then'
      #9#9'Result := ''GMT'''
      #9'else if TZ.Bias < 0 then'
      #9'begin'
      #9#9'if TZ.Bias mod 60 = 0 then'
      #9#9#9'Result := ''GMT+'' + IntToStr (Abs (TZ.Bias) div 60)'
      #9#9'else'
      #9#9#9'Result := ''GMT+'' + FloatToStr (Abs (TZ.Bias) / 60)'
      #9'end'
      #9'else'
      #9'begin'
      #9#9'if TZ.Bias mod 60 = 0 then'
      #9#9#9'Result := ''GMT-'' + IntToStr (TZ.Bias div 60)'
      #9#9'else'
      #9#9#9'Result := ''GMT-'' + FloatToStr (TZ.Bias / 60)'
      #9'end'
      'end;'
      ''
      'function GetLastDayofMonth (const DT: TDateTime): TDateTime;'
      'var'
      #9'D, M, Y: Word;'
      'begin'
      #9'optDecodeDateW (DT, Y, M, D);'
      #9'case M of'
      #9#9'2:'
      #9#9'begin'
      #9#9#9'if IsLeapYear (Y) then'
      #9#9#9#9'D := 29'
      #9#9#9'else'
      #9#9#9#9'D := 28;'
      #9#9'end;'
      #9#9'4, 6, 9, 11: D := 30'
      #9#9'else'
      #9#9#9'D := 31;'
      #9'end;'
      #9'Result := optEncodeDateW (Y, M, D) + Frac (DT);'
      'end;'
      ''
      'function GetFirstDayofMonth (const DT: TDateTime): TDateTime;'
      'var'
      #9'D, M, Y: Word;'
      'begin'
      #9'OptDecodeDateW (DT, Y, M, D);'
      #9'Result := OptEncodeDateW (Y, M, 1) + Frac (DT);'
      'end;'
      ''
      'function GetGoldenNumber (const Year: Word): Integer;'
      'begin'
      #9'Result := Year mod 19 + 1;'
      'end;'
      ''
      'function GetEpact (const Year: Word): Integer;'
      'var'
      #9'Century: Integer;'
      'begin'
      #9'Century := Year div 100 + 1;'
      #9'Result := ((11 * (GetGoldenNumber (Year) - 1)) mod 30'
      #9#9'+ (8 * Century + 5) div 25) - (3 * Century) div 4  + 8;'
      #9'while Result < 1 do'
      #9#9'Result := Result + 30;'
      #9'while Result > 30 do'
      #9#9'Result := Result - 30;'
      'end;'
      ''
      'function GetEasterSunday (const Year: Word): TDateTime;'
      'var'
      #9'C, I, J, H, G, L: Integer;'
      #9'D, M: Word;'
      'begin'
      #9'G := GetGoldenNumber (Year) - 1;'
      #9'C := Year div 100;'
      #9'H := (C - C div 4 - (8 * C + 13) div 25 + 19 * G + 15) mod 30;'
      #9'I := H - (H div 28) * (1 - (H div 28) * (29 div (H + 1))*((21 - G) div 11));'
      #9'J := (Year + Year div 4 + I + 2 - C + C div 4) mod 7;'
      ''
      #9'L := I - J;'
      #9'M := 3 + (L + 40) div 44;'
      #9'D := L + 28 - 31 * (M div 4);'
      #9'Result := OptEncodeDateW (Year, M, D);'
      'end;'
      ''
      'function GetGoodFriday (const Year: Word): TDateTime;'
      'begin'
      #9'Result := GetEasterSunday (Year) - 2;'
      'end;'
      ''
      'function GMTStr2Value(const GMTStr: string): Extended;'
      'var'
      #9'P: Integer;'
      'begin'
      #9'P := Pos (GMTStr, ''+'');'
      #9'if P > 0 then'
      #9'begin'
      #9#9'Result := Str2Ext (Trim (Copy (GMTStr, P + 1, Length (GMTStr) - P)));'
      #9'end'
      #9'else'
      #9'begin'
      #9#9'P := Pos (GMTStr, ''-'');'
      #9#9'if P > 0 then'
      #9#9'begin'
      #9#9#9'Result := -1 * Str2Ext (Trim (Copy (GMTStr, P + 1, Length (GMTStr) - P)));'
      #9#9'end'
      #9#9'else'
      #9#9#9'Result := 0;'
      #9'end;'
      'end;'
      ''
      'function ConvertGMTStrTimes (const FromGMTStr: string; const FromDT: TDateTime;'
      #9'const ToGMTStr: string): TDateTime;'
      'var'
      #9'GMT1, GMT2: Extended;'
      'begin'
      #9'GMT1 := GMTStr2Value (FromGMTStr);'
      #9'GMT2 := GMTStr2Value (ToGMTStr);'
      #9'Result := FromDT + GMT2 - GMT1;'
      'end;'
      ''
      'function GMTNow: TDateTime;'
      'begin'
      #9'Result := Now + GetLocalTZBIAS * OneDTMinute;'
      'end;'
      ''
      'function GMTDate: TDateTime;'
      'begin'
      #9'Result := Int (Now + GetLocalTZBIAS  * OneDTMinute);'
      'end;'
      ''
      'function GMTTime: TDateTime;'
      'begin'
      #9'Result := Frac (Now + GetLocalTZBIAS * OneDTMinute);'
      'end;'
      ''
      'function GetRFC822Difference: string;'
      'var'
      #9'TZ : TTimeZoneInformation;'
      'begin'
      #9'GetTimeZoneInformation (TZ);'
      #9'if TZ.Bias <= 0 then'
      #9'begin'
      #9#9'TZ.Bias := Abs (TZ.Bias);'
      #9#9'Result := ''+'' + LInt2ZStr (TZ.Bias div 60, 2)'
      #9#9#9'+ LInt2ZStr (TZ.Bias mod 60, 2)'
      #9'end'
      #9'else'
      #9#9'Result := ''-'' + LInt2ZStr (TZ.Bias div 60, 2)'
      #9#9#9'+ LInt2ZStr (TZ.Bias mod 60, 2)'
      'end;'
      ''
      'function RFC822Value(const RFC822: string): Extended;'
      'var'
      #9'S: String;'
      #9'L: LongInt;'
      'begin'
      #9'S := UpperCase (Trim (RFC822));'
      #9'Result := 0.0;'
      #9'if (S = ''GMT'') or (S = ''UT'') or (S = ''Z'') or (S = '''') then'
      #9#9'Exit'
      #9'else if (S = ''M'') then'
      #9#9'Result := -12.0'
      #9'else if (S = ''PST'') then'
      #9#9'Result := -8.0'
      #9'else if (S = ''MST'') or (S = ''PDT'') then'
      #9#9'Result := -7.0'
      #9'else if (S = ''CST'') or (S = ''MDT'') then'
      #9#9'Result := -6.0'
      #9'else if (S = ''EST'') or (S = ''CDT'') then'
      #9#9'Result := -5.0'
      #9'else if (S = ''EDT'') then'
      #9#9'Result := -4.0'
      #9'else if (S = ''A'') then'
      #9#9'Result := -1.0'
      #9'else if (S = ''N'') then'
      #9#9'Result := 1.0'
      #9'else if (S = ''Y'') then'
      #9#9'Result := 12.0'
      #9'else'
      #9'begin'
      #9#9'L := Str2LInt (S);'
      #9#9'Result := L div 100 + (L mod 100) / 60;'
      #9'end;'
      'end;'
      ''
      'function ConvertRFC822Times (const FromRFC822: string; const FromDT: TDateTime;'
      #9'const ToRFC822: string): TDateTime;'
      'var'
      #9'X1, X2: Extended;'
      'begin'
      #9'X1 := RFC822Value (FromRFC822);'
      #9'X2 := RFC822Value (ToRFC822);'
      #9'Result := FromDT + (X2 - X1) * OneDTHour;'
      'end;'
      ''
      'function StartOfWeek (const DT: TDateTime): TDateTime;'
      'begin'
      #9'Result := DT - DayOfWeek (DT) + 1;'
      'end;'
      ''
      'function EndOfWeek (const DT: TDateTime): TDateTime;'
      'begin'
      #9'Result := DT - DayOfWeek (DT) + 7;'
      'end;'
      ''
      'procedure SetLocalTZBias (const Bias: Longint);'
      'var'
      #9'TZ : TTimeZoneInformation;'
      'begin'
      #9'case GetTimeZoneInformation (TZ) of'
      #9#9'TIME_ZONE_ID_STANDARD: TZ.Bias := Bias - TZ.StandardBias;'
      #9#9'TIME_ZONE_ID_DAYLIGHT: TZ.Bias := Bias - TZ.DaylightBias;'
      #9'else'
      #9#9'TZ.Bias := Bias;'
      #9'end;'
      #9'SetTimeZoneInformation (TZ);'
      'end;'
      ''
      'function ThisYear: Word;'
      'begin'
      #9'Result := Date2Year (Date);'
      'end;'
      ''
      'function ThisMonth: Word;'
      'begin'
      #9'Result := Date2Month (Date);'
      'end;'
      ''
      'function ThisDay: Word;'
      'begin'
      #9'Result := Date2Day (Date);'
      'end;'
      ''
      'function ThisHr: Word;'
      'begin'
      #9'Result := Time2Hr (Time);'
      'end;'
      ''
      'function ThisMin: Word;'
      'begin'
      #9'Result := Time2Min (Time);'
      'end;'
      ''
      'function ThisSec: Word;'
      'begin'
      #9'Result := Time2Sec (Time);'
      'end;'
      ''
      'function ThisMSec: Word;'
      'begin'
      #9'Result := Time2MSec (Time);'
      'end;'
      ''
      'function SameDate (const DT1, DT2: TDateTime): Boolean;'
      'begin'
      #9'Result := Int (DT1) = Int (DT2);'
      'end;'
      ''
      'function SameTime (const DT1, DT2: TDateTime): Boolean;'
      'begin'
      #9'Result := abs (Frac (DT1) - Frac (DT2)) < OneDTMillisecond;'
      'end;'
      ''
      'function SameDateTime (const DT1, DT2: TDateTime): Boolean;'
      'begin'
      #9'Result := abs (DT1 - DT2) < OneDTMillisecond;'
      'end;'
      ''
      'function IsJanuary (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Date2Month (DT) = 1;'
      'end;'
      ''
      'function IsJanuaryNow: Boolean;'
      'begin'
      #9'Result := Date2Month (Date) = 1;'
      'end;'
      ''
      'function IsFebruary (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Date2Month (DT) = 2;'
      'end;'
      ''
      'function IsFebruaryNow: Boolean;'
      'begin'
      #9'Result := Date2Month (Date) = 2;'
      'end;'
      ''
      'function IsMarch (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Date2Month (DT) = 3;'
      'end;'
      ''
      'function IsMarchNow: Boolean;'
      'begin'
      #9'Result := Date2Month (Date) = 3;'
      'end;'
      ''
      'function IsApril (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Date2Month (DT) = 4;'
      'end;'
      ''
      'function IsAprilNow: Boolean;'
      'begin'
      #9'Result := Date2Month (Date) = 4;'
      'end;'
      ''
      'function IsMay (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Date2Month (DT) = 5;'
      'end;'
      ''
      'function IsMayNow: Boolean;'
      'begin'
      #9'Result := Date2Month (Date) = 5;'
      'end;'
      ''
      'function IsJune (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Date2Month (DT) = 6;'
      'end;'
      ''
      'function IsJuneNow: Boolean;'
      'begin'
      #9'Result := Date2Month (Date) = 6;'
      'end;'
      ''
      'function IsJuly (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Date2Month (DT) = 7;'
      'end;'
      ''
      'function IsJulyNow: Boolean;'
      'begin'
      #9'Result := Date2Month (Date) = 7;'
      'end;'
      ''
      'function IsAugust (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Date2Month (DT) = 8;'
      'end;'
      ''
      'function IsAugustNow: Boolean;'
      'begin'
      #9'Result := Date2Month (Date) = 8;'
      'end;'
      ''
      'function IsSeptember (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Date2Month (DT) = 9;'
      'end;'
      ''
      'function IsSeptemberNow: Boolean;'
      'begin'
      #9'Result := Date2Month (Date) = 9;'
      'end;'
      ''
      'function IsOctober (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Date2Month (DT) = 10;'
      'end;'
      ''
      'function IsOctoberNow: Boolean;'
      'begin'
      #9'Result := Date2Month (Date) = 10;'
      'end;'
      ''
      'function IsNovember (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Date2Month (DT) = 11;'
      'end;'
      ''
      'function IsNovemberNow: Boolean;'
      'begin'
      #9'Result := Date2Month (Date) = 11;'
      'end;'
      ''
      'function IsDecember (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Date2Month (DT) = 12;'
      'end;'
      ''
      'function IsDecemberNow: Boolean;'
      'begin'
      #9'Result := Date2Month (Date) = 12;'
      'end;'
      ''
      'function Hrs_Min_Sec (Secs: Extended): string;'
      'const'
      #9' OneSecond = 1/24/3600;'
      'var'
      #9'Total: Extended;'
      'begin'
      #9'Total := Secs * OneSecond;'
      #9'Result := Format( ''%1.0f days%s'', [Int (Total),'
      #9#9'FormatDateTime (''hh:nn:ss'', Frac (total))]);'
      'end;'
      ''
      'function DatesInSameMonth (const DT1, DT2: TDateTime): Boolean;'
      'begin'
      #9'Result := Date2Month (DT1) = Date2Month (DT2);'
      'end;'
      ''
      'function DatesInSameYear (const DT1, DT2: TDateTime): Boolean;'
      'begin'
      #9'Result := Date2Year (DT1) = Date2Year (DT2);'
      'end;'
      ''
      'function DatesInSameMonthYear (const DT1, DT2: TDateTime): Boolean;'
      'begin'
      #9'Result := DatesInSameMonth (DT1, DT2) and DatesInSameYear (DT1, DT2);'
      'end;'
      ''
      'function AddDays (const DT: TDateTime; const Days: Extended): TDateTime;'
      'begin'
      #9'Result := DT + Days;'
      'end;'
      ''
      'function IsAM (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Frac (DT) < 0.5'
      'end;'
      ''
      'function IsAMNow : Boolean;'
      'begin'
      #9'Result := Frac (Time) < 0.5'
      'end;'
      ''
      'function IsPM (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := not IsAM (DT);'
      'end;'
      ''
      'function IsPMNow: Boolean;'
      'begin'
      #9'Result := not IsAMNow;'
      'end;'
      ''
      'function IsNoon (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Frac (DT) = 0.5;'
      'end;'
      ''
      'function IsNoonNow: Boolean;'
      'begin'
      #9'Result := Frac (Time) = 0.5;'
      'end;'
      ''
      'function IsMidnight (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Frac (DT) = 0.0;'
      'end;'
      ''
      'function IsMidnightNow: Boolean;'
      'begin'
      #9'Result := Frac (Time) = 0.0;'
      'end;'
      ''
      'function IsSunday (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := DayOfWeek (DT) = 1;'
      'end;'
      ''
      'function IsSundayNow: Boolean;'
      'begin'
      #9'Result := DayOfWeek (Date) = 1;'
      'end;'
      ''
      'function IsMonday (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := DayOfWeek (DT) = 2;'
      'end;'
      ''
      'function IsMondayNow: Boolean;'
      'begin'
      #9'Result := DayOfWeek (Date) = 2;'
      'end;'
      ''
      'function IsTuesday (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := DayOfWeek (DT) = 3;'
      'end;'
      ''
      'function IsTuesdayNow: Boolean;'
      'begin'
      #9'Result := DayOfWeek (Date) = 3;'
      'end;'
      ''
      'function IsWednesday (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := DayOfWeek (DT) = 4;'
      'end;'
      ''
      'function IsWednesdayNow: Boolean;'
      'begin'
      #9'Result := DayOfWeek (Date) = 4;'
      'end;'
      ''
      'function IsThursday (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := DayOfWeek (DT) = 5;'
      'end;'
      ''
      'function IsThursdayNow: Boolean;'
      'begin'
      #9'Result := DayOfWeek (Date) = 5;'
      'end;'
      ''
      'function IsFriday (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := DayOfWeek (DT) = 6;'
      'end;'
      ''
      'function IsFridayNow: Boolean;'
      'begin'
      #9'Result := DayOfWeek (Date) = 6;'
      'end;'
      ''
      'function IsSaturday (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := DayOfWeek (DT) = 7;'
      'end;'
      ''
      'function IsSaturdayNow: Boolean;'
      'begin'
      #9'Result := DayOfWeek (Date) = 7;'
      'end;'
      ''
      'function IsWeekend (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := DayOfWeek (DT) in [1, 7];'
      'end;'
      ''
      'function IsWeekendNow: Boolean;'
      'begin'
      #9'Result := DayOfWeek (Date) in [1, 7];'
      'end;'
      ''
      'function IsWeekday (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := DayOfWeek (DT) in [2..6];'
      'end;'
      ''
      'function IsWeekdayNow: Boolean;'
      'begin'
      #9'Result := DayOfWeek (Date) in [2..6];'
      'end;'
      ''
      'function DaysApart (const DT1, DT2: TDateTime): LongInt;'
      'begin'
      #9'Result := Trunc (DT2) - Trunc (DT1);'
      'end;'
      ''
      'function DateIsLeapYear (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := IsLeapYear (Date2Year (DT));'
      'end;'
      ''
      'function DaysInMonth (const DT: TDateTime): Byte;'
      'begin'
      #9'case Date2Month (DT) of'
      #9#9'2: if DateIsLeapYear (DT) then'
      #9#9#9'Result := 29'
      #9#9'   else'
      #9#9#9'Result := 28;'
      #9#9'4, 6, 9, 11: Result := 30;'
      #9#9'else'
      #9#9#9'Result := 31;'
      #9'end;'
      'end;'
      ''
      'function DaysInThisMonth: Byte;'
      'begin'
      #9'Result := DaysInMonth (Date);'
      'end;'
      ''
      'function DaysLeftInMonth (const DT: TDateTime): Byte;'
      'begin'
      #9'Result := DaysInMonth (DT) - Date2Day (DT);'
      'end;'
      ''
      'function DaysLeftInThisMonth: Byte;'
      'begin'
      #9'Result := DaysLeftInMonth (Date);'
      'end;'
      ''
      'function DaysInYear (const DT: TDateTime): Word;'
      'begin'
      #9'if DateIsLeapYear (DT) then'
      #9#9'Result := 366'
      #9'else'
      #9#9'Result := 365;'
      'end;'
      ''
      'function DayOfYear (const DT: TDateTime): Word;'
      'begin'
      #9'Result := Trunc (DT) - Trunc (OptEncodeDateW (Date2Year (DT), 1, 1)) + 1;'
      'end;'
      ''
      'function DaysLeftInYear (const DT: TDateTime): Word;'
      'begin'
      #9'Result := DaysInYear (DT) - DayOfYear (DT);'
      'end;'
      ''
      'function ThisDayOfYear: Word;'
      'begin'
      #9'Result := DayOfYear (Date);'
      'end;'
      ''
      'function DaysLeftInThisYear: Word;'
      'begin'
      #9'Result := DaysLeftInYear (Date);'
      'end;'
      ''
      'function WhichSemester (const DT: TDateTime): Byte;'
      'begin'
      #9'Result := (Date2Month (DT) - 1) div 6 + 1;'
      'end;'
      ''
      'function WhichQuarter (const DT: TDateTime): Byte;'
      'begin'
      #9'Result := (Date2Month (DT) - 1) div 3 + 1;'
      'end;'
      ''
      'function GetFirstDayofQuarter (const DT: TDateTime): TDateTime;'
      'var'
      #9'D, M, Y: Word;'
      'begin'
      #9'OptDecodeDateW (DT, Y, M, D);'
      #9'case M of'
      #9#9'1..3: M := 1;'
      #9#9'4..6: M := 4;'
      #9#9'7..9: M := 7;'
      #9#9'10..12: M := 10;'
      #9'end;'
      #9'Result := OptEncodeDateW (Y, M, 1) + Frac (DT);'
      'end;'
      ''
      'function GetLastDayofQuarter (const DT: TDateTime): TDateTime;'
      'var'
      #9'D, M, Y: Word;'
      'begin'
      #9'OptDecodeDateW (DT, Y, M, D);'
      #9'case M of'
      #9#9'1..3:'
      #9#9'begin'
      #9#9#9'M := 3;'
      #9#9#9'D := 31;'
      #9#9'end;'
      #9#9'4..6:'
      #9#9'begin'
      #9#9#9'M := 6;'
      #9#9#9'D := 30;'
      #9#9'end;'
      #9#9'7..9:'
      #9#9'begin'
      #9#9#9'M := 9;'
      #9#9#9'D := 30;'
      #9#9'end;'
      #9#9'10..12:'
      #9#9'begin'
      #9#9#9'M := 12;'
      #9#9#9'D := 31;'
      #9#9'end;'
      #9'end;'
      #9'Result := OptEncodeDateW (Y, M, D) + Frac (DT);'
      'end;'
      ''
      'function GetFirstDayofQuarter2 (const Qtr: Byte; const Year: Word): TDateTime;'
      'begin'
      #9'Result := OptEncodeDateW (Year, (Qtr - 1) * 3 + 1, 1);'
      'end;'
      ''
      'function GetLastDayofQuarter2 (const Qtr: Byte; const Year: Word): TDateTime;'
      'var'
      #9'D, M: Word;'
      'begin'
      #9'case Qtr of'
      #9#9'1:'
      #9#9'begin'
      #9#9#9'M := 3;'
      #9#9#9'D := 31;'
      #9#9'end;'
      #9#9'2:'
      #9#9'begin'
      #9#9#9'M := 6;'
      #9#9#9'D := 30;'
      #9#9'end;'
      #9#9'3:'
      #9#9'begin'
      #9#9#9'M := 9;'
      #9#9#9'D := 30;'
      #9#9'end;'
      #9#9'4:'
      #9#9'begin'
      #9#9#9'M := 12;'
      #9#9#9'D := 31;'
      #9#9'end;'
      #9#9'else'
      #9#9'begin'
      #9#9#9'M := 0;'
      #9#9#9'D := 0;'
      #9#9'end;'
      #9'end;'
      #9'Result := OptEncodeDateW (Year, M, D);'
      'end;'
      ''
      'function GetFirstDayOfYear (const Year: Word): TDateTime;'
      'begin'
      #9'Result := OptEncodeDateW (Year, 1, 1);'
      'end;'
      ''
      'function GetLastDayOfYear (const Year: Word): TDateTime;'
      'begin'
      #9'Result := OptEncodeDateW (Year, 12, 31);'
      'end;'
      ''
      'function SubtractSecs (const DT: TDateTime; const Secs: Extended): TDateTime;'
      'begin'
      #9'Result := AddSecs (DT, -1 * Secs);'
      'end;'
      ''
      'function SubtractMins (const DT: TDateTime; const Mins: Extended): TDateTime;'
      'begin'
      #9'Result := AddMins (DT, -1 * Mins);'
      'end;'
      ''
      'function SubtractHrs (const DT: TDateTime; const Hrs: Extended): TDateTime;'
      'begin'
      #9'Result := AddHrs (DT, -1 * Hrs);'
      'end;'
      ''
      'function SubtractWeeks (const DT: TDateTime; const Weeks: Extended): TDateTime;'
      'begin'
      #9'Result := AddWeeks (DT, -1 * Weeks);'
      'end;'
      ''
      'function SubtractFortnights (const DT: TDateTime; const FNights: Extended): TDateTime;'
      'begin'
      #9'Result := AddWeeks (DT, FNights * -2);'
      'end;'
      ''
      'function SubtractMonths (const DT: TDateTime; const Months: Extended): TDateTime;'
      'begin'
      #9'Result := AddMonths (DT, -1 * Months);'
      'end;'
      ''
      'function SubtractQuarters (const DT: TDateTime; const Qtrs: Extended): TDateTime;'
      'begin'
      #9'Result := AddMonths (DT, Qtrs * -3);'
      'end;'
      ''
      'function SubtractSemesters (const DT: TDateTime; const Sems: Extended): TDateTime;'
      'begin'
      #9'Result := AddMonths (DT, Sems * -6);'
      'end;'
      ''
      'function SubtractYrs (const DT: TDateTime; const Yrs: Extended): TDateTime;'
      'begin'
      #9'Result := AddYrs (DT, -1 * Yrs);'
      'end;'
      ''
      'function SubtractDays (const DT: TDateTime; const Days: Extended): TDateTime;'
      'begin'
      #9'Result := DT - Days;'
      'end;'
      ''
      'function AgeAtDate (const DOB, DT: TDateTime): Integer;'
      'var'
      #9'D1, M1, Y1, D2, M2, Y2: Integer;'
      'begin'
      #9'if DT < DOB then'
      #9#9'Result := -1'
      #9'else'
      #9'begin'
      #9#9'OptDecodeDateI (DOB, Y1, M1, D1);'
      #9#9'OptDecodeDateI (DT, Y2, M2, D2);'
      #9#9'Result := Y2 - Y1;'
      #9#9'if (M2 < M1) or ((M2 = M1) and (D2 < D1)) then'
      #9#9#9'Dec (Result);'
      #9'end;'
      'end;'
      ''
      'function AgeNow (const DOB: TDateTime): Integer;'
      'begin'
      #9'Result := AgeAtDate (DOB, Date);'
      'end;'
      ''
      'function Date2LongMonth (const DT: TDateTime): string;'
      'begin'
      #9'Result := LongMonthNames [Date2Month (DT)];'
      'end;'
      ''
      'function Date2ShortMonth (const DT: TDateTime): string;'
      'begin'
      #9'Result := ShortMonthNames [Date2Month (DT)];'
      'end;'
      ''
      'function Date2LongDOW (const DT: TDateTime): string;'
      'begin'
      #9'Result := LongDayNames [DayOfWeek (DT)];'
      'end;'
      ''
      'function Date2ShortDOW (const DT: TDateTime): string;'
      'begin'
      #9'Result := ShortDayNames [DayOfWeek (DT)];'
      'end;'
      ''
      'function MonthName2Month (const MonthName: string): Word;'
      'var'
      #9'I: Integer;'
      '     Len: Integer;'
      '     MN: string;'
      'begin'
      #9'Result := 0;'
      #9'if MonthName = '''' then'
      '     '#9'Exit;'
      '     Len := Length (MonthName);'
      '     MN := AnsiUpperCase (MonthName);'
      '     for I := 1 to 12 do'
      '     begin'
      '     '#9'if AnsiUpperCase (LeftStr (ShortMonthNames [I], Len)) = MN then'
      '          begin'
      '          '#9'Result := I;'
      '               Exit;'
      '          end;'
      '     end;'
      '     for I := 1 to 12 do'
      '     begin'
      '     '#9'if AnsiUpperCase (LeftStr (LongMonthNames [I], Len)) = MN then'
      '          begin'
      '          '#9'Result := I;'
      #9#9#9'Exit;'
      #9#9'end;'
      #9'end;'
      'end;'
      ''
      'function DayName2DOW (const DayName: string): Byte;'
      'var'
      #9'I: Integer;'
      #9'Len: Integer;'
      #9'DN: string;'
      'begin'
      #9'Result := 0;'
      #9'if DayName = '''' then'
      #9#9'Exit;'
      #9'Len := Length (DayName);'
      #9'DN := AnsiUpperCase (DayName);'
      #9'for I := 1 to 7 do'
      #9'begin'
      #9#9'if AnsiUpperCase (LeftStr (ShortDayNames [I], Len)) = DN then'
      #9#9'begin'
      #9#9#9'Result := I;'
      #9#9#9'Exit;'
      #9#9'end;'
      #9'end;'
      #9'for I := 1 to 7 do'
      #9'begin'
      #9#9'if AnsiUpperCase (LeftStr (LongDayNames [I], Len)) = DN then'
      #9#9'begin'
      #9#9#9'Result := I;'
      #9#9#9'Exit;'
      #9#9'end;'
      #9'end;'
      'end;'
      ''
      'function ExactWeeksApart (const DT1, DT2: TDateTime): Extended;'
      'begin'
      #9'Result := DaysApart (DT1, DT2) / 7;'
      'end;'
      ''
      'function WeeksApart (const DT1, DT2: TDateTime): Integer;'
      'begin'
      #9'Result := DaysApart (DT1, DT2) div 7;;'
      'end;'
      ''
      'function CalendarWeeksApart (const DT1, DT2: TDateTime): Integer;'
      'begin'
      #9'Result := WeeksApart (StartOfWeek (DT1), StartOfWeek (DT2));'
      'end;'
      ''
      'function CalendarMonthsApart (const DT1, DT2: TDateTime): Integer;'
      'var'
      #9'D1, M1, Y1, D2, M2, Y2: Integer;'
      'begin'
      #9'OptDecodeDateI (DT1, Y1, M1, D1);'
      #9'OptDecodeDateI (DT2, Y2, M2, D2);'
      #9'if Y1 = Y2 then'
      #9#9'Result := M2 - M1'
      #9'else if Y2 > Y1 then'
      #9#9'Result := (12 - M1) + (Y2 - (Y1 + 1)) * 12 + M2'
      #9'else'
      #9#9'Result := -((12 - M2) + (Y1 - (Y2 + 1)) * 12 + M1)'
      'end;'
      ''
      'function GetFirstSundayOfYear (const Year: Word): TDateTime;'
      'var'
      #9'StartYear: TDateTime;'
      'begin'
      #9'StartYear := GetFirstDayOfYear (Year);'
      #9'if DayOfWeek (StartYear) = 1 then'
      #9#9'Result := StartYear'
      #9'else'
      #9#9'Result := StartOfWeek (StartYear) + 7;'
      'end;'
      ''
      'function Date2WeekNo (const DT: TDateTime): Integer;'
      'var'
      #9'Year: Word;'
      #9'FirstSunday, StartYear: TDateTime;'
      #9'WeekOfs: Byte;'
      'begin'
      #9'Year := Date2Year (DT);'
      #9'StartYear := GetFirstDayOfYear (Year);'
      #9'if DayOfWeek (StartYear) = 0 then'
      #9'begin'
      #9#9'FirstSunday := StartYear;'
      #9#9'WeekOfs := 1;'
      #9'end'
      #9'else'
      #9'begin'
      #9#9'FirstSunday := StartOfWeek (StartYear) + 7;'
      #9#9'WeekOfs := 2;'
      #9#9'if DT < FirstSunday then'
      #9#9'begin'
      #9#9#9'Result := 1;'
      #9#9#9'Exit;'
      #9#9'end;'
      #9'end;'
      #9'Result := DaysApart (FirstSunday, StartofWeek (DT)) div 7 + WeekOfs;'
      'end;'
      ''
      'function DatesInSameWeekNo (const DT1, DT2: TDateTime): Boolean;'
      'begin'
      #9'if Date2Year (DT1) <> Date2Year (DT2) then'
      #9#9'Result := False'
      #9'else'
      #9#9'Result := Date2WeekNo (DT1) = Date2WeekNo (DT2);'
      'end;'
      ''
      'function WeekNosApart (const DT1, DT2: TDateTime): Integer;'
      'begin'
      #9'if Date2Year (DT1) <> Date2Year (DT2) then'
      #9#9'Result := -999'
      #9'else'
      #9#9'Result := Date2WeekNo (DT2) - Date2WeekNo (DT1);'
      'end;'
      ''
      'function ThisWeekNo: Integer;'
      'begin'
      #9'Result := Date2WeekNo (Date);'
      'end;'
      ''
      'function StartOfWeekNo (const WeekNo, Year: Word): TDateTime;'
      'var'
      #9'FirstSunday: TDateTime;'
      'begin'
      #9'FirstSunday := GetFirstSundayOfYear (Year);'
      #9'if Date2Day (FirstSunday) = 1 then'
      #9#9'Result := AddWeeks (FirstSunday, WeekNo - 1)'
      #9'else'
      #9#9'Result := AddWeeks (FirstSunday, WeekNo - 2)'
      'end;'
      ''
      'function EndOfWeekNo (const WeekNo, Year: Word): TDateTime;'
      'begin'
      #9'Result := StartOfWeekNo (WeekNo, Year) + 6;'
      'end;'
      ''
      'function DWY2Date (const DOW, WeekNo, Year: Word): TDateTime;'
      'begin'
      #9'Result := StartOfWeekNo (WeekNo, Year) + DOW - 1;'
      'end;'
      ''
      'function AgeAtDateInMonths (const DOB, DT: TDateTime): Integer;'
      '{ Routine donated by David Gobbett}'
      'var'
      '   D1, D2 : Integer;'
      '   M1, M2 : Integer;'
      '   Y1, Y2 : Integer;'
      'begin'
      #9'if DT < DOB then'
      #9#9'Result := -1'
      #9'else'
      #9'begin'
      #9#9'OptDecodeDateI (DOB, Y1, M1, D1);'
      #9#9'OptDecodeDateI (DT, Y2, M2, D2);'
      #9#9'if Y1 = Y2 then // Same Year'
      #9#9#9'Result := M2 - M1'
      #9#9'else // Different Years'
      #9#9'begin'
      #9#9#9'// 12 months per year age'
      #9#9#9'Result := 12 * AgeAtDate (DOB, DT);'
      #9#9#9'if M1 > M2 then'
      #9#9#9#9'Result := Result + (12 - M1) + M2'
      #9#9#9'else if M1 < M2 then'
      #9#9#9#9'Result := Result + M2 - M1'
      #9#9#9'else'#9'if D1 > D2 then // Same Month'
      #9#9#9#9'Result := Result + 12;'
      #9#9'end;'
      #9#9'if D1 > D2 then // we have counted one month too many'
      #9#9#9'Dec (Result);'
      #9'end;'
      'end;'
      ''
      'function AgeAtDateInWeeks (const DOB, DT: TDateTime): Integer;'
      '{ Routine donated by David Gobbett}'
      'begin'
      #9'if DT < DOB then'
      #9#9'Result := -1'
      #9'else'
      #9'begin'
      #9#9'Result := Trunc (DT - DOB) div 7;'
      #9'end; {else}'
      'end;'
      ''
      'function AgeNowInMonths (const DOB: TDateTime): Integer;'
      '{ Routine donated by David Gobbett}'
      'begin'
      #9'Result := AgeAtDateInMonths (DOB, Date);'
      'end;'
      ''
      'function AgeNowInWeeks (const DOB: TDateTime): Integer;'
      '{ Routine donated by David Gobbett}'
      'begin'
      #9'Result := AgeAtDateInWeeks (DOB, Date);'
      'end;'
      ''
      'function AgeNowDescr (const DOB: TDateTime): String;'
      '{ Routine donated by David Gobbett}'
      'var'
      #9'Age : integer;'
      'begin'
      #9'Age := AgeNow (DOB);'
      #9'if Age > 0 then'
      #9'begin'
      #9#9'if Age = 1 then'
      #9#9#9'Result := LInt2EStr (Age) + '' year'''
      #9#9'else'
      #9#9#9'Result := LInt2EStr (Age) + '' years'';'
      #9'end'
      #9'else'
      #9'begin'
      #9#9'Age := AgeNowInMonths (DOB);'
      #9#9'if Age >= 2 then'
      #9#9#9'Result := LInt2EStr(Age) + '' months'''
      #9#9'else'
      #9#9'begin'
      #9#9#9'Age := AgeNowInWeeks (DOB);'
      #9#9#9'if Age = 1 then'
      #9#9#9#9'Result := LInt2EStr(Age) + '' week'''
      #9#9#9'else'
      #9#9#9#9'Result := LInt2EStr(Age) + '' weeks'';'
      #9#9'end;'
      #9'end;'
      'end;'
      ''
      'function ISODayOfWeek (const DT: TDateTime): Integer;'
      'begin'
      #9'Result := DayOfWeek (DT);'
      #9'Dec (Result);'
      #9'if Result = 0 then'
      #9#9'Result := 7;'
      'end;'
      ''
      'function StartOfISOWeek (const DT: TDateTime): TDateTime;'
      'begin'
      #9'Result := DT - ISODayOfWeek (DT) + 1;'
      'end;'
      ''
      'function EndOfISOWeek (const DT: TDateTime): TDateTime;'
      'begin'
      #9'Result := DT - ISODayOfWeek (DT) + 7;'
      'end;'
      ''
      '{: Most years have 52 weeks, but years that start on a Thursday and leap'
      'years that start on a Wednesday (or Thursday) have 53 weeks. Based on'
      'code supplied by Niklas Astram }'
      'function ISOWeeksInYear (const Year: Word): Byte;'
      'var'
      #9'DOW: Integer;'
      'begin'
      #9'DOW := ISODayOfWeek (GetFirstDayOfYear (Year));'
      #9'if (DOW = 4) or ((DOW = 3) and IsLeapYear (Year)) then'
      #9#9'Result := 53'
      #9'else'
      #9#9'Result :=52;'
      'end;'
      ''
      'procedure Date2ISOWeekNo (const DT: TDateTime; var WeekNo: Byte;'
      #9'var Year: Word);'
      'var'
      #9'FirstMonday, StartYear: TDateTime;'
      #9'WeekOfs: Byte;'
      'begin'
      #9'Year := Date2Year (DT);'
      #9'StartYear := GetFirstDayOfYear (Year) + 3; // Jan 4th'
      #9'if ISODayOfWeek (StartYear) <= 4 then'
      #9'begin'
      #9#9'FirstMonday := StartOfISOWeek (StartYear);'
      #9#9'WeekOfs := 1;'
      #9#9'if DT < FirstMonday then'
      #9#9'begin'
      #9#9#9'Dec (Year);'
      #9#9#9'WeekNo := ISOWeeksInYear (Year);'
      #9#9#9'Exit;'
      #9#9'end;'
      #9'end'
      #9'else'
      #9'begin'
      #9#9'FirstMonday := StartOfISOWeek (StartYear) + 7;'
      #9#9'WeekOfs := 2;'
      #9#9'if DT < FirstMonday then'
      #9#9'begin'
      #9#9#9'WeekNo := 1;'
      #9#9#9'Exit;'
      #9#9'end;'
      #9'end;'
      #9'WeekNo := DaysApart (FirstMonday, StartofISOWeek (DT)) div 7 + WeekOfs;'
      #9'if WeekNo > ISOWeeksInYear (Year) then'
      #9'begin'
      #9#9'WeekNo := 1;'
      #9#9'Inc (Year);'
      #9'end;'
      'end;'
      ''
      'function Date2ISOWeekStr (const DT: TDateTime): string;'
      'var'
      #9'WeekNo: Byte;'
      #9'Year: Word;'
      'begin'
      #9'Date2ISOWeekNo (DT, WeekNo, Year);'
      #9'Result := LInt2ZStr (Year, 4) + ''W'' + LInt2ZStr (WeekNo, 2)'
      #9#9'+ LInt2EStr (ISODayOfWeek (DT));'
      'end;'
      ''
      'function Date2ISOWeekEnhStr (const DT: TDateTime): string;'
      'var'
      #9'WeekNo: Byte;'
      #9'Year: Word;'
      'begin'
      #9'Date2ISOWeekNo (DT, WeekNo, Year);'
      #9'Result := LInt2ZStr (Year, 4) + ''-W'' + LInt2ZStr (WeekNo, 2) + ''-'''
      #9#9'+ LInt2EStr (ISODayOfWeek (DT));'
      'end;'
      ''
      'function Date2ISOWeekOnlyStr (const DT: TDateTime): string;'
      'var'
      #9'WeekNo: Byte;'
      #9'Year: Word;'
      'begin'
      #9'Date2ISOWeekNo (DT, WeekNo, Year);'
      #9'Result := LInt2ZStr (Year, 4) + ''W'' + LInt2ZStr (WeekNo, 2);'
      'end;'
      ''
      'function Date2ISOWeekOnlyEnhStr (const DT: TDateTime): string;'
      'var'
      #9'WeekNo: Byte;'
      #9'Year: Word;'
      'begin'
      #9'Date2ISOWeekNo (DT, WeekNo, Year);'
      #9'Result := LInt2ZStr (Year, 4) + ''-W'' + LInt2ZStr (WeekNo, 2);'
      'end;'
      ''
      'function Date2ISOStr (const DT: TDateTime): string;'
      'var'
      #9'D, M, Y: Integer;'
      'begin'
      #9'OptDecodeDateI (DT, Y, M, D);'
      #9'Result := LInt2ZStr (Y, 4) + LInt2ZStr (M, 2)'
      #9#9'+ LInt2ZStr (D, 2);'
      'end;'
      ''
      'function Date2ISOInt (const DT: TDateTime): Cardinal;'
      'var'
      #9'D, M, Y: Integer;'
      'begin'
      #9'OptDecodeDateI (DT, Y, M, D);'
      #9'Result := Y * 10000 + M * 100 + D;'
      'end;'
      ''
      'function Date2ISOEnhStr (const DT: TDateTime): string;'
      'var'
      #9'D, M, Y: Integer;'
      'begin'
      #9'OptDecodeDateI (DT, Y, M, D);'
      #9'Result := LInt2ZStr (Y, 4) + ''-'' + LInt2ZStr (M, 2) + ''-'''
      #9#9'+ LInt2ZStr (D, 2);'
      'end;'
      ''
      'function DatesInSameISOWeekNo (const DT1, DT2: TDateTime): Boolean;'
      'var'
      #9'W1, W2: Byte;'
      #9'Y1, Y2: Word;'
      'begin'
      #9'Date2ISOWeekNo (DT1, W1, Y1);'
      #9'Date2ISOWeekNo (DT2, W2, Y2);'
      #9'Result := (W1 = W2) and (Y1 = Y2);'
      'end;'
      ''
      'function ISOWeekNosApart (DT1, DT2: TDateTime): Integer;'
      'var'
      #9'W1, W2: Byte;'
      #9'I, Y1, Y2: Word;'
      #9'Negative: Boolean;'
      #9'DTHold: TDateTime;'
      'begin'
      #9'Negative := Int (DT2) < Int (DT1);'
      #9'if Negative then'
      #9'begin'
      #9#9'DTHold := DT1;'
      #9#9'DT1 := DT2;'
      #9#9'DT2 := DTHold;'
      #9'end;'
      ''
      #9'// Now DT1 <= DT2'
      ''
      #9'Date2ISOWeekNo (DT1, W1, Y1);'
      #9'Date2ISOWeekNo (DT2, W2, Y2);'
      #9'if Y1 = Y2 then'
      #9#9'Result := W2 - W1'
      #9'else'
      #9'begin'
      #9#9'Result := ISOWeeksInYear (Y1) - W1 + W2;'
      #9#9'for I := Y1 + 1 to Y2 - 1 do'
      #9#9#9'Result := Result + ISOWeeksInYear (I)'
      #9'end;'
      ''
      #9'if Negative then'
      #9#9'Result := -1 * Result;'
      'end;'
      ''
      'procedure ThisISOWeekNo (var WeekNo: Byte; var Year: Word);'
      'begin'
      #9'Date2ISOWeekNo (Date, WeekNo, Year);'
      'end;'
      ''
      'function GetFirstMondayOfYear (const Year: Word): TDateTime;'
      'var'
      #9'StartYear: TDateTime;'
      'begin'
      #9'StartYear := GetFirstDayOfYear (Year);'
      #9'if ISODayOfWeek (StartYear) = 1 then'
      #9#9'Result := StartYear'
      #9'else'
      #9#9'Result := StartOfISOWeek (StartYear) + 7;'
      'end;'
      ''
      'function StartOfISOWeekNo (const WeekNo, Year: Word): TDateTime;'
      'var'
      #9'FirstMonday: TDateTime;'
      'begin'
      #9'FirstMonday := GetFirstMondayOfYear (Year);'
      #9'if Date2Day (FirstMonday) < 5 then'
      #9#9'Result := AddWeeks (FirstMonday, WeekNo - 1)'
      #9'else'
      #9#9'Result := AddWeeks (FirstMonday, WeekNo - 2)'
      'end;'
      ''
      'function EndOfISOWeekNo (const WeekNo, Year: Word): TDateTime;'
      'begin'
      #9'Result := StartOfISOWeekNo (WeekNo, Year) + 6;'
      'end;'
      ''
      'function ISOYWD2Date (const Year: Word; const WeekNo, DOW: Byte): TDateTime;'
      'begin'
      #9'Result := StartOfISOWeekNo (WeekNo, Year) + DOW - 1;'
      'end;'
      ''
      'function ElapsingTime (DT1, DT2: TDateTime ): string;'
      ''
      #9'function GetPadChar (ReturnChar: Boolean): string;'
      #9'begin'
      #9#9'if ReturnChar then'
      #9#9#9'Result := '' '''
      #9#9'else'
      #9#9#9'Result := '''';'
      #9'end;'
      ''
      #9'function SetDTString (Value: LongInt; const OneStr, TwoStr: string): string;'
      #9'begin'
      #9#9'Result := '''';'
      #9#9'if Value = 1 then'
      #9#9#9'Result := Format (''%d '' + OneStr, [1])'
      #9#9'else if Value > 1 then'
      #9#9#9'Result := Format( ''%d '' + TwoStr, [Value] );'
      #9'end;'
      ''
      'const'
      #9'OneWeek = ''week'';'
      #9'FewWeeks = ''weeks'';'
      #9'OneDay = ''day'';'
      #9'FewDays = ''days'';'
      #9'OneHour = ''hr'';'
      #9'FewHours = ''hrs'';'
      #9'OneMin = ''min'';'
      #9'FewMins = ''mins'';'
      #9'OneSec = ''sec'';'
      #9'FewSecs = ''secs'';'
      #9'OneMSec = ''msec'';'
      #9'FewMSecs = ''msecs'';'
      ''
      'var'
      #9'Week, Day: LongInt;'
      #9'Hour, Min, Sec, MSec: Word;'
      #9'DTHold: TDateTime;'
      #9'PadChar: string;'
      'begin'
      #9'if DT2 < DT1 then'
      #9'begin'
      #9#9'DTHold := DT1;'
      #9#9'DT1 := DT2;'
      #9#9'DT2 := DTHold;'
      #9'end;'
      ''
      #9'Week := Trunc (ExactWeeksApart (DT1, DT2));'
      #9'Day := DaysApart (DT1, DT2) - (Week * 7);'
      #9'DecodeTime (DT2 - DT1, Hour, Min, Sec, MSec);'
      ''
      #9'// Week'
      #9'Result := SetDTString (Week, OneWeek, FewWeeks);'
      ''
      #9'// Day'
      #9'PadChar := GetPadChar (Result <> '''');'
      #9'Result := Result + PadChar + SetDTString (Day, OneDay, FewDays);'
      ''
      #9'// Hour'
      #9'PadChar := GetPadChar (Result <> '''');'
      #9'Result := Result + PadChar + SetDTString (Hour, OneHour, FewHours);'
      ''
      #9'// Min'
      #9'PadChar := GetPadChar (Result <> '''');'
      #9'Result := Result + PadChar + SetDTString (Min, OneMin, FewMins);'
      ''
      #9'// Sec'
      #9'PadChar := GetPadChar (Result <> '''');'
      #9'Result := Result + PadChar + SetDTString (Sec, OneSec, FewSecs);'
      ''
      #9'// MSec'
      #9'PadChar := GetPadChar (Result <> '''');'
      #9'Result := Result + PadChar + SetDTString (MSec, OneMSec, FewMSecs);'
      'end;'
      ''
      '{$IFDEF D4PLUS}'
      'function DateTimeToLargeInteger (const DT: TDateTime): Large_Integer;'
      'const'
      #9'LclTab: array [1..12] of Byte = (30,28,31,30,31,30,31,31,30,31,30,31);'
      'var'
      #9'LclInt: Word;'
      #9'LclTDateTime: TDateTime;'
      #9'LclSystemTime: TSystemTime;'
      'begin'
      #9'Result.QuadPart := 0;'
      #9'if DT < 1 then'
      #9'   LclTDateTime := SysUtils.Date'
      #9'else'
      #9'   LclTDateTime := 0;'
      ''
      #9'LclTDateTime := GetGMTTime (LclTDateTime + DT);'
      #9'DateTimeToSystemTime (LclTDateTime, LclSystemTime);'
      ''
      #9'with LclSystemTime do'
      #9'begin'
      #9#9'for LclInt := 1601 to wYear - 1 do'
      #9#9'    Inc (Result.QuadPart, 365 + Integer (IsLeapYear(LclInt)));'
      ''
      #9#9'for LclInt:= 1 to wMonth - 1 do'
      #9#9'    Inc (Result.QuadPart, LclTab [lclInt]);'
      ''
      #9#9'if (wMonth > 2) and IsLeapYear(WYear) then'
      #9#9'   Inc(Result.QuadPart);'
      ''
      #9#9'Inc (Result.QuadPart, wDay);'
      ''
      #9#9'Result.QuadPart := (Result.QuadPart * 86400 +  // 24*60*60'
      #9#9#9'(wHour * 60 + wMinute) * 60 + wSecond) * 10000000;'
      #9'end'
      'end;'
      ''
      '{--- FileTime Routines ---}'
      ''
      'function FileTime2DateTime (const FT: TFileTime): TDateTime;'
      'var'
      #9'ST: TSystemTime;'
      'begin'
      '  '#9'FileTimeToSystemTime (FT, ST);'
      '  '#9'Result := SystemTimeToDateTime (ST);'
      'end;'
      ''
      'function DateTime2FileTime (const DT: TDateTime): TFileTime;'
      'var'
      #9'ST: TSystemTime;'
      'begin'
      #9'if DT <= -109205.0 then // Check to see if Date/Time before 1/1/1601'
      #9#9'Int64 (Result) := 0'
      '     else'
      '     begin'
      #9#9'DateTimeToSystemTime (DT, ST);'
      '          SystemTimeToFileTime (ST, Result);'
      '     end;'
      'end;'
      '{$ENDIF}'
      ''
      'function IsValidShortMonth (const Month: string): Boolean;'
      'var'
      #9'I: Integer;'
      'begin'
      #9'Result := False;'
      #9'for I := 1 to 12 do'
      #9#9'if AnsiCompareText (Month, ShortMonthNames [I]) = 0 then'
      #9#9'begin'
      #9#9#9'Result := True;'
      #9#9#9'Break'
      #9#9'end;'
      'end;'
      ''
      'function IsValidLongMonth (const Month: string): Boolean;'
      'var'
      #9'I: Integer;'
      'begin'
      #9'Result := False;'
      #9'for I := 1 to 12 do'
      #9#9'if AnsiCompareText (Month, LongMonthNames [I]) = 0 then'
      #9#9'begin'
      #9#9#9'Result := True;'
      #9#9#9'Break'
      #9#9'end;'
      'end;'
      ''
      'function IsValidShortDOW (const DOW: string): Boolean;'
      'var'
      #9'I: Integer;'
      'begin'
      #9'Result := False;'
      #9'for I := 1 to 12 do'
      #9#9'if AnsiCompareText (DOW, ShortDayNames [I]) = 0 then'
      #9#9'begin'
      #9#9#9'Result := True;'
      #9#9#9'Break'
      #9#9'end;'
      'end;'
      ''
      'function IsValidLongDOW (const DOW: string): Boolean;'
      'var'
      #9'I: Integer;'
      'begin'
      #9'Result := False;'
      #9'for I := 1 to 12 do'
      #9#9'if AnsiCompareText (DOW, LongDayNames [I]) = 0 then'
      #9#9'begin'
      #9#9#9'Result := True;'
      #9#9#9'Break'
      #9#9'end;'
      'end;'
      ''
      'function IsFirstDayOfMonth (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Date2Day (DT) = 1;'
      'end;'
      ''
      'function IsFirstDayOfMonthNow: Boolean;'
      'begin'
      #9'Result := IsFirstDayOfMonth (SysUtils.Date);'
      'end;'
      ''
      'function IsLastDayOfMonth (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Int (DT) = Int (GetLastDayOfMonth (DT));'
      'end;'
      ''
      'function IsLastDayOfMonthNow: Boolean;'
      'begin'
      #9'Result := IsLastDayOfMonth (SysUtils.Date);'
      'end;'
      ''
      'function IsFirstDayOfYear (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Int (DT) = Int (GetFirstDayOfYear (Date2Year (DT)));'
      'end;'
      ''
      'function IsFirstDayOfYearNow: Boolean;'
      'begin'
      #9'Result := IsFirstDayOfYear (SysUtils.Date);'
      'end;'
      ''
      'function IsLastDayOfYear (const DT: TDateTime): Boolean;'
      'begin'
      #9'Result := Int (DT) = Int (GetLastDayOfYear (Date2Year (DT)));'
      'end;'
      ''
      'function IsLastDayOfYearNow: Boolean;'
      'begin'
      #9'Result := IsLastDayOfYear (SysUtils.Date);'
      'end;'
      ''
      'function ISODateTime2DateTime (const ISODT: String): TDateTime;'
      'var'
      #9'sDate, sTime: string;'
      #9'Year, Month, Day: Word;'
      #9'P: Integer;'
      'begin'
      #9'try'
      #9#9'P := Pos ('' '', ISODT);'
      #9#9'sDate := Trim (LeftStr (ISODT, P - 1));'
      #9#9'sTime := Trim (RightAfterStr (ISODT, P));'
      #9#9'sTime := ReplaceChStr (sTime, '':'', TimeSeparator); //Change to Locale Settings'
      ''
      #9#9'P := Pos (''-'', sDate);'
      #9#9'Year :=  Str2Lint (LeftStr (sDate, P - 1));'
      #9#9'sDate := RightAfterStr (sDate, P);'
      ''
      #9#9'P := Pos (''-'', sDate);'
      #9#9'Month :=  Str2Lint (LeftStr (sDate, P - 1));'
      #9#9'Day := Str2Lint (RightAfterStr (sDate, P));'
      #9#9'Result := OptEncodeDateW (Year, Month, Day) + Frac (Str2Time (sTime));'
      #9'except'
      #9#9'result := 0;'
      #9'end;'
      'end;'
      ''
      'function OptDate: TDateTime;'
      'var'
      #9'ST: TSystemTime;'
      'begin'
      #9'Windows.GetLocalTime (ST);'
      #9'Result := OptEncodeDateW (ST.wYear, ST.wMonth, ST.wDay);'
      'end;'
      ''
      'procedure OptDecodeDateI (const DT: TDateTime; out Year, Month, Day: Integer);'
      'var'
      #9'J: Integer;'
      'begin'
      #9'J := pred ((Trunc (DT) + 693900) shl 2);'
      #9'Year := J div 146097;'
      #9'Day := (J - 146097 * Year) shr 2;'
      #9'J := (Day shl 2 + 3) div 1461;'
      #9'Day:= (Day shl 2 + 7 - 1461 * J) shr 2;'
      #9'Month :=(5 * Day - 3) div 153;'
      #9'Day := (5 * Day + 2 - 153 * Month) div 5;'
      #9'Year := 100 * Year + J;'
      #9'if Month < 10 then'
      #9#9'Inc (Month, 3)'
      #9'else'
      #9'begin'
      #9#9'Dec (Month, 9);'
      #9#9'Inc (Year);'
      #9'end;'
      'end;'
      ''
      'procedure OptDecodeDateW (const DT: TDateTime; out Year, Month, Day: Word);'
      'var'
      #9'J: Integer;'
      'begin'
      #9'J := pred ((Trunc (DT) + 693900) shl 2);'
      #9'Year := J div 146097;'
      #9'Day := (J - 146097 * Year) shr 2;'
      #9'J := (Day shl 2 + 3) div 1461;'
      #9'Day:= (Day shl 2 + 7 - 1461 * J) shr 2;'
      #9'Month :=(5 * Day - 3) div 153;'
      #9'Day := (5 * Day + 2 - 153 * Month) div 5;'
      #9'Year := 100 * Year + J;'
      #9'if Month < 10 then'
      #9#9'Inc (Month, 3)'
      #9'else'
      #9'begin'
      #9#9'Dec (Month, 9);'
      #9#9'Inc (Year);'
      #9'end;'
      'end;'
      ''
      'function OptEncodeDateI (Year, Month, Day: Integer): TDateTime;'
      'var'
      #9'DayTable : PDayTable;'
      'begin'
      #9'DayTable := @MonthDays [IsLeapYear (Year)];'
      #9'if (Day <= DayTable^[Month]) and (Year > 0) and (Year < 10000) and'
      #9#9'(Month < 13) and (Day > 0) then'
      #9'begin'
      #9#9'if Month > 2 then'
      #9#9#9'Dec (Month,3)'
      #9#9'else if (Month > 0) then'
      #9#9'begin'
      #9#9#9'Inc (Month, 9);'
      #9#9#9'Dec(Year);'
      #9#9'end'
      #9#9'else // Month <= 0'
      #9#9#9'raise Exception.Create (rsInvalidDate);'
      ''
      #9#9'Result := (146097 * (Year div 100)) shr 2 +'
      #9#9#9'(1461 * (Year - 100*(Year div 100))) shr 2 +'
      #9#9#9' (153 * Month+2) div 5 + Day - 693900;'
      #9'end'
      #9'else'
      #9#9'raise Exception.Create (rsInvalidDate + IntToStr (Year) + ''-'''
      #9#9#9'+ IntToStr (Month) + ''-'' + IntToStr (Day));'
      'end;'
      ''
      'function OptEncodeDateW (Year, Month, Day: Word): TDateTime;'
      'var'
      #9'DayTable : PDayTable;'
      'begin'
      #9'DayTable := @MonthDays [IsLeapYear (Year)];'
      #9'if (Day <= DayTable^[Month]) and (Year > 0) and (Year < 10000) and'
      #9#9'(Month < 13) and (Day > 0) then'
      #9'begin'
      #9#9'if Month > 2 then'
      #9#9#9'Dec (Month,3)'
      #9#9'else if (Month > 0) then'
      #9#9'begin'
      #9#9#9'Inc (Month, 9);'
      #9#9#9'Dec(Year);'
      #9#9'end'
      #9#9'else // Month <= 0'
      #9#9#9'raise Exception.Create (rsInvalidDate);'
      ''
      #9#9'Result := (146097 * (Year div 100)) shr 2 +'
      #9#9#9'(1461 * (Year - 100*(Year div 100))) shr 2 +'
      #9#9#9' (153 * Month+2) div 5 + Day - 693900;'
      #9'end'
      #9'else'
      #9#9'raise Exception.Create (rsInvalidDate);'
      'end;'
      ''
      'function OptDate2Year (const DT: TDateTime) : Word;'
      'var'
      #9'J: Integer;'
      #9'Day, Month, Year: Integer;'
      'begin'
      #9'J := pred ((Trunc (DT) + 693900) shl 2);'
      #9'Year := J div 146097;'
      #9'Day := (J - 146097 * Year) shr 2;'
      #9'J := (Day shl 2 + 3) div 1461;'
      #9'Day:= (Day shl 2 + 7 - 1461 * J) shr 2;'
      #9'Month :=(5 * Day - 3) div 153;'
      #9'Year := 100 * Year + J;'
      #9'if Month >= 10 then'
      #9#9'Inc (Year);'
      #9'Result := Year'
      'end;'
      ''
      'function OptDate2Month (const DT: TDateTime) : Word;'
      'var'
      #9'J: Integer;'
      #9'Day, Month, Year: Integer;'
      'begin'
      #9'J := pred ((Trunc (DT) + 693900) shl 2);'
      #9'Year := J div 146097;'
      #9'Day := (J - 146097 * Year) shr 2;'
      #9'J := (Day shl 2 + 3) div 1461;'
      #9'Day:= (Day shl 2 + 7 - 1461 * J) shr 2;'
      #9'Month :=(5 * Day - 3) div 153;'
      #9'if Month < 10 then'
      #9#9'Inc (Month, 3)'
      #9'else'
      #9#9'Dec (Month, 9);'
      #9'Result := Month'
      'end;'
      ''
      'function OptDate2Day (const DT: TDateTime) : Word;'
      'var'
      #9'J: Integer;'
      #9'Day, Month, Year: Integer;'
      'begin'
      #9'J := pred ((Trunc (DT) + 693900) shl 2);'
      #9'Year := J div 146097;'
      #9'Day := (J - 146097 * Year) shr 2;'
      #9'J := (Day shl 2 + 3) div 1461;'
      #9'Day:= (Day shl 2 + 7 - 1461 * J) shr 2;'
      #9'Month :=(5 * Day - 3) div 153;'
      #9'Day := (5 * Day + 2 - 153 * Month) div 5;'
      #9'Result := Day'
      'end;'
      ''
      'function OptThisYear: Integer;'
      'var'
      #9'ST: TSystemTime;'
      'begin'
      #9'Windows.GetLocalTime (ST);'
      #9'Result := ST.wYear;'
      'end;'
      ''
      'function OptThisMonth: Integer;'
      'var'
      #9'ST: TSystemTime;'
      'begin'
      #9'Windows.GetLocalTime (ST);'
      #9'Result := ST.wMonth;'
      'end;'
      ''
      'function OptThisDay: Integer;'
      'var'
      #9'ST: TSystemTime;'
      'begin'
      #9'Windows.GetLocalTime (ST);'
      #9'Result := ST.wDay;'
      'end;'
      ''
      'function OptDayOfYear (const DT: TDateTime): Integer;'
      'begin'
      #9'Result := Trunc (DT) - Trunc (OptEncodeDateI (OptDate2Year (DT), 1, 1)) + 1;'
      'end;'
      ''
      'function OptDaysLeftInYear (const DT: TDateTime): Integer;'
      'begin'
      #9'Result := DaysInYear (DT) - OptDayOfYear (DT);'
      'end;'
      ''
      'function OptThisDayOfYear: Integer;'
      'begin'
      #9'Result := OptDayOfYear (OptDate);'
      'end;'
      ''
      'function OptDaysLeftInThisYear: Integer;'
      'begin'
      #9'Result := OptDaysLeftInYear (OptDate);'
      'end;'
      ''
      'function Date2AccessStr (const DT: TDateTime): String;'
      'var'
      #9'Day, Month, Year: Integer;'
      'begin'
      #9'try'
      #9#9'OptDecodeDateI (DT, Year, Month, Day);'
      #9#9'Result := ''#'' + LInt2ZStr (Month, 2) + ''/'' + LInt2ZStr (Day, 2)'
      #9#9#9'+ ''/'' + LInt2ZStr (Year, 4) + ''#'';'
      #9'except'
      #9#9'Result := '''';'
      #9'end;'
      'end;'
      ''
      'function Date2ANSISQLStr (const DT: TDateTime): String;'
      'var'
      #9'Day, Month, Year: Integer;'
      'begin'
      #9'try'
      #9#9'OptDecodeDateI (DT, Year, Month, Day);'
      #9#9'Result := ''{ d '''''' + LInt2ZStr (Year, 4) + ''-'' + LInt2ZStr (Month, 2)'
      #9#9#9'+ ''-'' + LInt2ZStr (Day, 2) + '''''' }'';'
      #9'except'
      #9#9'Result := '''';'
      #9'end;'
      'end;'
      ''
      'function Days2Hrs (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * HrsPerDay;'
      'end;'
      ''
      'function Hrs2Days (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * DaysPerHr;'
      'end;'
      ''
      'function Mins2Hrs (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * HrsPerMin;'
      'end;'
      ''
      'function Hrs2Mins (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * MinsPerHr;'
      'end;'
      ''
      'function Mins2Secs (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * SecsPerMin;'
      'end;'
      ''
      'function Secs2Mins (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * MinsPerSec;'
      'end;'
      ''
      'function Hrs2Secs (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * SecsPerHr;'
      'end;'
      ''
      'function Secs2Hrs (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * HrsPerSec;'
      'end;'
      ''
      'function Days2Secs (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * SecsPerDay;'
      'end;'
      ''
      'function Secs2Days (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * DaysPerSec;'
      'end;'
      ''
      'function Days2Mins (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * MinsPerDay;'
      'end;'
      ''
      'function Mins2Days (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * DaysPerMin;'
      'end;'
      ''
      'function Days2Weeks (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * WeeksPerDay;'
      'end;'
      ''
      'function Weeks2Days (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * DaysPerWeek;'
      'end;'
      ''
      'function Days2Fortnights (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * FortnightsPerDay;'
      'end;'
      ''
      'function Fortnights2Days (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * DaysPerFortnight;'
      'end;'
      ''
      'function Days2Months (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value / DaysPerSynodicMonth;'
      'end;'
      ''
      'function Months2Days (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * DaysPerSynodicMonth;'
      'end;'
      ''
      'function Days2Years (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value / DaysPerTropicalYear;'
      'end;'
      ''
      'function Years2Days (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * DaysPerTropicalYear;'
      'end;'
      ''
      'function Days2YearsGregorian (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value / DaysPerGregorianYear;'
      'end;'
      ''
      'function YearsGregorian2Days (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * DaysPerGregorianYear;'
      'end;'
      ''
      'function Days2YearsJulian (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value / DaysPerJulianYear;'
      'end;'
      ''
      'function YearsJulian2Days (const Value: Extended): Extended;'
      'begin'
      #9'Result := Value * DaysPerJulianYear;'
      'end;'
      ''
      'function Sec2TimeStr (Sec : LongInt): string;'
      'var'
      #9'Tmp: LongInt ;'
      'begin'
      #9'Tmp := Sec;'
      #9'Result:= LInt2EStr (tmp div 3600) + TimeSeparator;'
      #9'Tmp := Tmp mod 3600;'
      #9'Result := Result + LInt2ZStr (Tmp div 60, 2) + TimeSeparator;'
      #9'Tmp := Tmp mod 60;'
      #9'Result := Result + LInt2ZStr(Tmp, 2);'
      'end;'
      ''
      'function EnhStr2Date (InDate: String): TDateTime;'
      'var'
      #9'Year, Month, Day: Integer;'
      #9'DateOrder: TDateOrder;'
      #9'cnt: Integer;'
      ''
      #9'procedure ConvertMonth (const MMM: string; MM : ShortInt);'
      #9'var'
      #9#9'Posn: integer;'
      #9'begin'
      #9#9'Posn := Pos (MMM, InDate);'
      #9#9'if Posn > 0 then'
      #9#9'begin'
      #9#9#9'Delete (InDate, Posn, Length (MMM));'
      #9#9#9'Insert (Format (''%.2d'', [MM]), InDate, Posn);'
      ''
      #9#9#9'if (Length (InDate) > Posn + 2) and'
      #9#9#9#9'(Copy (InDate, Posn + 2, 1) <> DateSeparator) then'
      #9#9#9'begin'
      #9#9#9#9'Insert (DateSeparator, InDate, Posn + 2);'
      #9#9#9'end;'
      ''
      #9#9#9'if Posn = 1 then'
      #9#9#9'begin'
      #9#9#9#9'// If the Month was found at the start, we know the order is MDY'
      #9#9#9#9'DateOrder := doMDY;'
      #9#9#9'end'
      #9#9#9'else'
      #9#9#9'begin'
      #9#9#9#9'// Put in DateSeparator characters if they don''t exist'
      #9#9#9#9'if Copy (InDate, Posn - 1, 1) <> DateSeparator then'
      #9#9#9#9#9'Insert (DateSeparator, InDate, Posn);'
      #9#9#9'end;'
      #9#9#9'Month := MM;'
      #9#9'end;'
      #9'end;'
      ''
      #9'function GetNextNumber (Len: ShortInt) : Integer;'
      #9'var'
      #9#9'cnt : ShortInt;'
      #9'begin'
      #9#9'Result := 0;'
      ''
      #9#9'// If their is a date separator found, load the entire number'
      #9#9'cnt := Pos (DateSeparator, InDate);'
      #9#9'if (cnt <> 0) and (cnt <= 5) then'
      #9#9#9'Len := cnt;'
      ''
      #9#9'while Len > 0 do'
      #9#9'begin'
      #9#9#9'if Length(InDate) = 0 then'
      #9#9#9#9'Break;'
      ''
      #9#9#9'if Copy (InDate, 1, 1) = DateSeparator then'
      #9#9#9#9'Break;'
      ''
      #9#9#9'Result := Result * 10 + Ord (InDate [1]) - 48;'
      #9#9#9'Dec (Len);'
      #9#9#9'Delete (InDate, 1, 1);'
      #9#9'end;'
      ''
      #9#9'// Remove any Date Separator characters'
      #9#9'while Copy (InDate, 1, 1) = DateSeparator do'
      #9#9#9'Delete (InDate, 1, 1);'
      #9'end;'
      ''
      'begin'
      #9'Year := 0;'
      #9'Month := 0;'
      #9'Day := 0;'
      #9'DateOrder := doUnknown;'
      ''
      #9'try'
      #9#9'// Trim any leading / trailing spaces from the input'
      #9#9'InDate := UpperCase (Trim (InDate));'
      ''
      #9#9'// Allow '' '', ''-'' and ''/'' as valid alternatives for DateSeparator'
      #9#9'InDate := ReplaceChStr (InDate, '' '', DateSeparator);'
      #9#9'InDate := ReplaceChStr (InDate, ''-'', DateSeparator);'
      #9#9'InDate := ReplaceChStr (InDate, ''/'', DateSeparator);'
      #9#9'InDate := ReplaceChStr (InDate, ''\'', DateSeparator);'
      ''
      #9#9'// Remove any leading / trailing seperators'
      #9#9'while Copy (InDate, 1, 1) = DateSeparator do'
      #9#9#9'Delete (InDate, 1, 1);'
      #9#9'while Copy (InDate, Length(InDate), 1) = DateSeparator do'
      #9#9#9'Delete (InDate, Length(InDate), 1);'
      ''
      #9#9'if InDate = '''' then'
      #9#9'begin'
      #9#9#9'Result := 0.0;'
      #9#9#9'Exit;'
      #9#9'end;'
      ''
      #9#9'// Firstly, See if we have the month in words'
      #9#9'for cnt := 1 to 12 do'
      #9#9#9'ConvertMonth (UpperCase (ShortMonthNames [cnt]), cnt);'
      ''
      #9#9'// Remove any characters from the remainder, leaving only numbers and DateSeparator'
      #9#9'cnt := 1;'
      #9#9'while (cnt <= Length (InDate)) do'
      #9#9'begin'
      #9#9#9'if (InDate [cnt] in [''0''..''9'', DateSeparator]) then'
      #9#9#9#9'Inc (cnt)'
      #9#9#9'else'
      #9#9#9#9'Delete (InDate, cnt, 1);'
      #9#9'end;'
      ''
      #9#9'if DateOrder = doUnknown then'
      #9#9#9'DateOrder := GetDateOrder (ShortDateFormat);'
      ''
      #9#9'// OK, we''ve interrogated the date as much as possible, time to convert it'
      #9#9'case DateOrder of'
      #9#9#9'doDMY :'
      #9#9#9'begin'
      #9#9#9#9'Day := GetNextNumber (2);'
      #9#9#9#9'Month := GetNextNumber (2);'
      #9#9#9#9'Year := GetNextNumber (4);'
      #9#9#9'end;'
      #9#9#9'doMDY :'
      #9#9#9'begin'
      #9#9#9#9'Month := GetNextNumber (2);'
      #9#9#9#9'Day := GetNextNumber (2);'
      #9#9#9#9'Year := GetNextNumber (4);'
      #9#9#9'end;'
      #9#9#9'doYMD :'
      #9#9#9'begin'
      #9#9#9#9'if Length (InDate) > 8 then'
      #9#9#9#9#9'Year := GetNextNumber (4)'
      #9#9#9#9'else'
      #9#9#9#9#9'Year  := GetNextNumber (2);'
      #9#9#9#9'Month := GetNextNumber (2);'
      #9#9#9#9'Day   := GetNextNumber (2);'
      #9#9#9'end;'
      #9#9'end;'
      ''
      #9#9'if Month = 0 then'
      #9#9#9'Month := OptThisMonth;'
      #9#9'if Year  = 0 then'
      #9#9#9'Year  := OptThisYear;'
      ''
      #9#9'// Just in case the date has been entered in a different order to what'
      #9#9'// was expected, try and switch the numbers around'
      #9#9'if (Day > 1000) and (Year <= 31) then'
      #9#9'begin'
      #9#9#9'cnt   := Year;'
      #9#9#9'Year  := Day;'
      #9#9#9'Day   := cnt;'
      #9#9'end;'
      #9#9'if (Month > 1000) and (Year <= 12) then'
      #9#9'begin'
      #9#9#9'cnt   := Year;'
      #9#9#9'Year  := Month;'
      #9#9#9'Month := cnt;'
      #9#9'end;'
      #9#9'if Year < 100 then // If 2 Digit'
      #9#9'begin'
      #9#9#9'case ESB2DigitYr of'
      #9#9#9#9'// edyNone - Nothing has to be done'
      #9#9#9#9'edyCutOff: // Process using ESB2DigitCutOff'
      #9#9#9#9'begin'
      #9#9#9#9#9'if 1900 + Year < ESB2DigitCutOff then'
      #9#9#9#9#9#9'Year := 2000 + Year'
      #9#9#9#9#9'else'
      #9#9#9#9#9#9'Year := 1900 + Year'
      #9#9#9#9'end;'
      #9#9#9#9'edyHistoric: // Take Yr as this year or earlier'
      #9#9#9#9'begin'
      #9#9#9#9#9'if 2000 + Year <= ThisYear then'
      #9#9#9#9#9#9'Year := 2000 + Year'
      #9#9#9#9#9'else'
      #9#9#9#9#9#9'Year := 1900 + Year;'
      #9#9#9#9'end;'
      #9#9#9'end;'
      #9#9'end;'
      ''
      #9#9'// Assume ALL dates entered fall between these two numbers'
      #9#9'if (Year < 1900) or (Year > 2100) then'
      #9#9'begin'
      #9#9#9'cnt := Day * 100 + Month;'
      #9#9#9'if (cnt >= 1900) and (cnt <= 2100) then'
      #9#9#9'begin'
      #9#9#9#9'cnt   := Year;'
      #9#9#9#9'Year  := Day * 100 + Month;'
      #9#9#9#9'Month := cnt div 100;'
      #9#9#9#9'Day   := cnt mod 100;'
      #9#9#9'end;'
      #9#9'end;'
      ''
      #9#9'Result := OptEncodeDateI (Year, Month, Day);'
      ''
      #9'except'
      '    // The date entered must have been invalid'
      #9#9'Result := 0.0;'
      #9'end;'
      'end;'
      ''
      'end.'
      ''
    )
    Options = [eoAutoIndent, eoBracketHighlight, eoGroupUndo, eoScrollPastEol, eoSmartTabs, eoTabIndent, eoTabsToSpaces, eoTrimTrailingSpaces]
    VisibleSpecialChars = [vscSpace, vscTabAtLast]
    SelectedColor.BackPriority = 50
    SelectedColor.ForePriority = 50
    SelectedColor.FramePriority = 50
    SelectedColor.BoldPriority = 50
    SelectedColor.ItalicPriority = 50
    SelectedColor.UnderlinePriority = 50
    SelectedColor.StrikeOutPriority = 50
    BracketHighlightStyle = sbhsBoth
    BracketMatchColor.Background = clNone
    BracketMatchColor.Foreground = clNone
    BracketMatchColor.Style = [fsBold]
    FoldedCodeColor.Background = clNone
    FoldedCodeColor.Foreground = clGray
    FoldedCodeColor.FrameColor = clGray
    MouseLinkColor.Background = clNone
    MouseLinkColor.Foreground = clBlue
    LineHighlightColor.Background = 16444903
    LineHighlightColor.Foreground = clNone
    inline SynLeftGutterPartList1: TSynGutterPartList
      object SynGutterMarks1: TSynGutterMarks
        Width = 24
        Visible = False
        MouseActions = <>
      end
      object SynGutterLineNumber1: TSynGutterLineNumber
        Width = 33
        MouseActions = <>
        MarkupInfo.Background = 12058620
        MarkupInfo.Foreground = clNone
        DigitCount = 3
        ShowOnlyLineNumbersMultiplesOf = 10
        ZeroStart = False
        LeadingZeros = False
      end
      object SynGutterChanges1: TSynGutterChanges
        Width = 4
        Visible = False
        MouseActions = <>
        ModifiedColor = 59900
        SavedColor = clGreen
      end
      object SynGutterSeparator1: TSynGutterSeparator
        Width = 2
        Visible = False
        MouseActions = <>
        MarkupInfo.Background = clWhite
        MarkupInfo.Foreground = clGray
      end
      object SynGutterCodeFolding1: TSynGutterCodeFolding
        Visible = False
        MouseActions = <>
        MarkupInfo.Background = clNone
        MarkupInfo.Foreground = clGray
        MouseActionsExpanded = <>
        MouseActionsCollapsed = <>
      end
    end
  end
  object tvData: TTreeView
    Left = 0
    Height = 518
    Top = 40
    Width = 259
    Align = alLeft
    BorderStyle = bsNone
    Font.Height = -13
    Font.Quality = fqCleartype
    Images = imlMain
    ParentFont = False
    RightClickSelect = True
    SortType = stBoth
    TabOrder = 4
    OnChange = tvDataChange
    OnChanging = tvDataChanging
    OnCompare = tvDataCompare
    OnDragDrop = tvDataDragDrop
    OnDragOver = tvDataDragOver
    OnEdited = tvDataEdited
    OnEditingEnd = tvDataEditingEnd
    OnMouseDown = tvDataMouseDown
    OnStartDrag = tvDataStartDrag
    Options = [tvoAutoItemHeight, tvoHideSelection, tvoKeepCollapsedNodes, tvoRightClickSelect, tvoShowButtons, tvoShowLines, tvoShowRoot, tvoToolTips, tvoThemedDraw]
  end
  object aclMain: TActionList
    Images = imlMain
    Left = 305
    Top = 130
    object actEditCut: TEditCut
      Category = 'Edit'
      Caption = 'Cu&t'
      Hint = 'Cut'
      ImageIndex = 2
      ShortCut = 16472
    end
    object actEditCopy: TEditCopy
      Category = 'Edit'
      Caption = '&Copy'
      Hint = 'Copy'
      ImageIndex = 1
      ShortCut = 16451
    end
    object actEditPaste: TEditPaste
      Category = 'Edit'
      Caption = '&Paste'
      Hint = 'Paste'
      ImageIndex = 5
      ShortCut = 16470
    end
    object actEditUndo: TEditUndo
      Category = 'Edit'
      Caption = '&Undo'
      Hint = 'Undo'
      ImageIndex = 6
      OnExecute = actEditUndoExecute
      OnUpdate = actEditUndoUpdate
      ShortCut = 16474
    end
    object actFileOpen: TFileOpen
      Category = 'File'
      Caption = '&Open ...'
      Dialog.DefaultExt = '.clb'
      Dialog.Filter = 'Librarian Files (*.clb)|*.clb|GExperts Library Files (*.fs)|*.fs|All Known Files|*.clb;*.fs|All Files (*.*)|*.*'
      Dialog.FilterIndex = 3
      Hint = 'Open Library'
      ImageIndex = 8
      ShortCut = 16463
      OnAccept = actFileOpenAccept
    end
    object actFileExit: TFileExit
      Category = 'File'
      Caption = 'E&xit'
      Hint = 'Exit'
      ImageIndex = 7
    end
    object actSnippetSave: TAction
      Category = 'File'
      Caption = 'Save'
      Hint = 'Save Snippet'
      ImageIndex = 13
      OnExecute = actSnippetSaveExecute
      OnUpdate = actSnippetSaveUpdate
      ShortCut = 16467
    end
    object actFolderNew: TAction
      Category = 'Edit'
      Caption = 'Folder'
      Hint = 'New Folder'
      ImageIndex = 14
      OnExecute = actFolderNewExecute
    end
    object actFileNew: TFileOpen
      Category = 'File'
      Caption = 'New &Library'
      Dialog.DefaultExt = '.clb'
      Dialog.Filter = 'Librarian Files (*.clb)|*.clb|GExperts Library Files (*.fs)|*.fs|All Known Files|*.clb;*.fs|All Files (*.*)|*.*'
      Dialog.FilterIndex = 3
      Dialog.Options = [ofOverwritePrompt, ofPathMustExist, ofEnableSizing, ofViewDetail, ofAutoPreview]
      Hint = 'New Code Library'
      ImageIndex = 12
      ShortCut = 16462
      OnAccept = actFileNewAccept
    end
    object actFolderRootNew: TAction
      Category = 'Edit'
      Caption = 'Root Folder'
      Hint = 'New Root Folder'
      ImageIndex = 15
      OnExecute = actFolderRootNewExecute
    end
    object actSnippetNew: TAction
      Category = 'Edit'
      Caption = 'Snippet'
      Hint = 'New Snippet'
      ImageIndex = 11
      OnExecute = actSnippetNewExecute
    end
    object actDelete: TAction
      Category = 'Edit'
      Caption = 'Delete'
      Hint = 'Delete Selected Node'
      ImageIndex = 16
      OnExecute = actDeleteExecute
      OnUpdate = actDeleteUpdate
    end
    object actExpandAll: TAction
      Caption = 'Expand All'
      Hint = 'Expand Tree Nodes'
      ImageIndex = 17
      OnExecute = actExpandAllExecute
    end
    object actCollapseAll: TAction
      Caption = 'Collapse All'
      Hint = 'Collapse Tree Nodes'
      ImageIndex = 18
      OnExecute = actCollapseAllExecute
    end
    object actCompact: TAction
      Category = 'File'
      Caption = 'Compact'
      Hint = 'Compact Snippet Library File'
      OnExecute = actCompactExecute
      OnUpdate = actCompactUpdate
    end
    object actFileImport: TFileOpen
      Category = 'File'
      Caption = '&Import ...'
      Dialog.Filter = 'Librarian Files (*.clb)|*.clb|GExperts Library Files (*.fs)|*.fs|All Known Files|*.clb;*.fs|All Files (*.*)|*.*'
      Dialog.FilterIndex = 3
      Hint = 'Import Existing Library'
      ShortCut = 16457
      OnAccept = actFileImportAccept
    end
    object actSetHighlighter: TAction
      Caption = 'actSetHighlighter'
      OnExecute = actSetHighlighterExecute
    end
    object actSettings: TAction
      Category = 'Options'
      Caption = 'Settings'
      ImageIndex = 19
      OnExecute = actSettingsExecute
    end
  end
  object imlMain: TImageList
    Left = 352
    Top = 130
    Bitmap = {
      4C7A370000001000000010000000D85C00000000000078DAECBD07581449DBF7
      3B864D06C0B4EEAABBC635AC69CD71CD3927CC8892A38A808A82A01225275141
      018982283989280A8822888A0888223907C971FEA7AA99991D4692FB3EE79CEB
      7BBF87EBFAD33D55F5ABBBEAAEAA9EEEEAEE1AD686B34B589B35D3599BCEE7B0
      369C5D0F80F52D225C5E3F7977F457F606D9AF2579ACF946BE6CC0297F886845
      A19FE21D9A473A4BFE4A6F96B1C325A221DDF21B354EF4D9A55F237C2E82C9A3
      D72EDD2A96DE8D44C282684AB7FC86B3BD894DDB5EDB746AFA9FF6472F4367CC
      BE17C9FECDC9AF8AF07FF7B81E52061759860EEC950F1370E6530986CBFBD6B3
      E63BE5F632777AC332B97986E435AC53D6D8E1602FD35B75DBE3522197518A39
      CA711838D21B127EEF712AA318AB1FBEACFFC9E2765D2F33474792766407BC38
      CBF456C914B7077593373DC06F0B43712CB50E92C5AD502A698556792B0C8B1B
      B03632A1E93B73C77A9699A30B615610F5E6CBE307D604E7F74356F9B4E81637
      43B1B415BA15AD5026DB5D45AD5893D70CE99C6A9CF958828D51AFD8236FDDAB
      26F52A6E570E6D07F199BE8F6BAF104E9CD83E56D2C62ECD6FC59F1FAAF14B52
      01446233B0F14D2E6493B3D1CBD4B148A01E2306D9B8D51B973563695E0B16E4
      3663E6A73A8C7F5F8EA10979E8FBF403FA3C49C7DE947CCC098E6D26F5F014F4
      452F33A7E423AF3E625D7A19636F507C0E7E88CE6038AA2D6F73B13F21037DCD
      1C6B88BD511DF872F5087BEF3AA5F44288C4FCC30D23E53EF4BE007BE352D8DF
      993B7D21E99677DA9E668E31F383629AC4530B30F14526B625E74139AD00B303
      639A493BE5137662977D89F47B922E7BFBD337AD87DE66E1AFA0D8A61F2D9CEB
      58A68E7748DCD01EF5476387D1A47DCA483EA544B7C8E7B11DA5BB626EBA5DEF
      8AA1764F646469B69B25F0A76F6CA445F2D1EE89681E9DF1159595DAE515155F
      898653F5847F1617A76D677F2389A4434F44EAEECDCF5319985C69450FFF681E
      82F6C96786279FBB54473CAD2FD73E4D13FBEC5987EA88A76C4C6CECBFB65F56
      5EAE5D5A56D6ADFD8E78369BAD5D5A5AAAFD343ABA47F69B9A9A505D5DCDE31B
      1B1BB54B4A4AB48B8B8BBBB55F5E5E8EBAFA7A3C8D7ECAE3ABAAABB5AB6B6AB4
      ABAAAADAF1823232336927CA1B5B98EF207968F3A9B595CDEEB0CCB637AE31DB
      FA860664E7E6307C07FDB1B991A41164F9F9EC9C1C6E1F7CD9115F5353C3D4B1
      B6AE0ECD2D2D686E6E46727232AE129E6BB7A3B140FF48BD5C481E5DF5FB479D
      B186A6C61B884A2D6CADDF7510676762695ECEEAE2CFD8C28C14BBBE95A40DB1
      B2B3D5E28F33B5B4C84F7AFB864DF278D4194F387652F21BE2B38A56731BABBB
      DC70D2A6CB3DEE7AE1695C2C1DB3F59DF124AEDA372880FA8E4DF27ACF2D0329
      57D3F3C497F0BE7F8F962DB9339ED85944E29196F18196816D666DF990F8F37A
      406830E2131340E228AFD5950F4819B2FC838340FC40D357393839B203C8E7A0
      F050CAFAB3BAF92369E6503F64666591F6AF6DB573B801B73B9E34AF7A1AC7EA
      C11F298373C883F0D6FCC20250BF91FAB349DDEC583DFC23760EEB1A19E1696C
      0CEEFB0760DA4C87DA9EDAFEE5977BA63FFFEC5DFDFDF7EE58BBC985DDBBB73B
      7E1DF10CC387FB549238A3CEB85F7FBDA7F5C30F775AC78C79D3FAFBEF896C21
      E190D6DEDFB9BAF6E9EBD93262C4738C19F3BA75F4E8F8D67EFDEEB492B462FC
      EC8811F70F7FFFBD277BF4E8A4E63E7D3C43870E7BDCD0AB977BDBD8ECE72434
      EAB784D621C31E3792B890DF7E4B68FAFE7B0F366178ED3874A877FEF8F1EF5A
      49FC39FAF9B7DF126B899D166E3C096F1D31F24515DDEFDDDBE30C2D0B65B8F1
      03077A37FEF6DBAB26BADFBF7F90C5D8B16F5B070CF0E28DA19F7EF28A1F3F3E
      A575E0C0505BFA79F4E8D7CD8306793771E3870CF1CE9C34E903A95F12C927B1
      F5871F3CF349F9E6F0D56FCE8F3F7A158D1B97DC4AEC30690853C45F7F2121AF
      021111EF1AE2FB7A7E963FCDC0815E4FFBF7F72AEFDFFF4E3637CDB77E5F7630
      66BEE9FBB283E3DD377D5F7566BFA7DF973DB5FF2E25053A972FB697EEA51ED9
      7727E395A68F0BBF873711EE480EBF8D84B0B6B0936AAA87BBB2FFEE7D9BDDB8
      104FBCB97B05056F1FA1F87D0CD2C21D10EF63C1C4299E509ED5997D1AFFE09E
      0B5EDDD143557E06EACB0B515B9A8BD2F41748F53743FC7DBB569AA6239E8AC6
      2585DE46E663377CC94D4375F16754157C4451721432239D90E47E91CDCF0B7E
      5FD2B8944777F039CA0DE59F925095978EB28C0494A6C5A1302902AF3D745A05
      F876DF9734EE69900792BC8D90F7220025EF9FA298D82EFFF80AE90F5D9078DF
      BA5990E7EF6309AF5E3179BC0E75444A80253263EE23E7853F52C29DF036D08E
      89533DAD9EDDD5F7E5799D0B4CBA8CB800BCBA6B8CD79E3A480AB8CE84B9B8BA
      305238AE94DAD57190C41B09F61F133353848486F2F2B8A4AB0BD637FEF1E7F1
      6F787A08A3795009F2CA278F0FE12F2FFDDCD34C49BF5EC9E9F36CDADF5F8679
      B039FD7D65772CE9CF43DAFABC075E933ECFF4F7307BC4DF6DEBEF970DF4BA3C
      0EB5F5F9DB78E5A9CBF4795E7FF73345BC6F5B9B77751CE2F6F94F8F5D993E4F
      FB7BF1BBA7C87C741B496E3A0CCF7F1CEA7DC09CABC35CFE09EDB35E86A48F3F
      4039E9EFD5859F9011E589445F1B86E71E8728175B5C0E159F57CC3EBFEFB87D
      369FE4911AE98EB7416D654F7AF39AC73E2BA980C2DD3710BDECDCC2E5693BD2
      FE40D37E247DF6B587365E07B6F557EBABB68C6D7E769F812BB7FC73B82CED53
      B44FF0B7FF7D3F5F9EDD98FC32C87BBDC2DECB4E3C966B9BCB76741CA669A3F3
      CA20E518877DBA6DAC828E11D7FFBDB87DBAA3E330B9A6C1A2432771C5FB0944
      F55C18F6454601748D0CC0617B75761CA22C4D3F71D516CCDFA7C8ECDF8F7A89
      0A12AEDD761CFFAEABF376723D44D330DCD53B0178F2E4095EC4C7233B3B1BE7
      B5B568DC8F823C7F1F23D744CC3960515111C3E4E5E5815CDFF0DBFFBEBBF376
      5ACFCB86FAB844FA3FDD7245CEC55CF8EBFE9FFC3B7CF870AF23E2E20FC816FC
      E2847568B3D71A25A95E6B94CBC9167DD628E210496F646B8B2B76768CE83E0D
      A371340D51196BB562DB39DC2A85BE84AD9EA0FB18CB2EB8424AF9248E1C3902
      4D6D6D68E9E8303A7FE1021326A5741C2B349D315E3B0CBD562B5512B6379148
      EF75271A2619C642EA840ABE7CF982CF9F3FE3C18307ED44C3C8F521C9FF3826
      19C480702D443FB6E3E564D0D5B908FD939297C564FD275FF113499EFC7C10B9
      0EE117ED8FDFC2F3AB8CB02565655DF0C73BB51F18E80F7F7F3F1416177F134F
      CB5B4A6C169794306CDA870F3DE6E9D829292D4511610B48FF4F4D4FC78B8497
      3DE68B094B6DE6171632D75DC1E161080A0BED9C5FDB9EA736F30A0A90929686
      E0B0B076C7FE9EF0B9847D979A8AC82751080C0969C7D2BED3192F49FA6E5979
      1933F6B9A27EA4C7252ECB151FDF97F4E5EAF1DAE158A2E541FAB02AE49414BE
      D2DF9A2E3C8D3B1F40FABF625BFFA7E36FB5A214C9A39C33B6BAD76AC532C28A
      757920708AC6BF3A80DC7C349461FF05FF9D86D620CAF954377F33CFCFFE91CB
      E189863847160C737CF06AA4F303D7EFCF69F6EF8E9D95558731394D502D6DC2
      8992261C2FAC8752617DC350E788E4A12E51EF48DA51026C3F2E3BF3731D6667
      D763CA872F64BF96D9FE9C9083F969A5902FA8C3CAC41CF61097A85CC2CCE6F7
      F33F6C03C35371F9DFDE14F244F3599190859F9D1FBE60EC32F62F3065D7286B
      66F8699935E8FB3885277EBE7F5C2614F2AA31D23BA661985344BC60FD4F933C
      FA3E4D67B6F2C58DEDF4DDC77AF423FC0F4F527122A304235D1ED574E443CA52
      F1FA0047BDEE44E3785639849F67423EB70A235C1F3774D60E3CFE1F1FFDC5BA
      1EB6836C9F2BE7D7E27476057E758942977DB7A3FE732B6A44EFBB71302CA862
      0FBAFD04FFA6FF0B79C5B3C5D28BD8E3DD1F577CF3D8708A1EB73AFA43CBEA98
      54CA6BFF0B5E4CE643B1FF20F727F7FECDD0FCC5FDA9FC088F687992CF2FDC30
      EE7D80CD5B37F8DE7476ACD3BA78A1EEA0D8C1869DBB77366CDCBCB161E59A55
      0DB3E6CCAE13121A502A2222543469E2B0BC69D326ED65EE31F0F1478E1C0CCD
      2B2A442939F6A76564E01EF9CE313137C305721E79E0F041F4EDDD8BD1B43FFB
      62EAD43F0E08F2C724C4787C566E2E5EA724232A361AF782FC6160A48FC103BE
      67346FD64F983575F257BCB4D4D7FC936731F00F0B86A99931460FEDC768F982
      FE9835E31F7E8FC19EC7AC2DAC9972B2473AE52D2C4D30ED3721469B960963EE
      AC7FF8AD665B6B77DBECAE5F72645E7247BCC73D6F585B9B62D1C4C18CF6AC1D
      8CF973FFE1979B2CAF520E51C641C783AD078D0FA1B8AC94C73F7CF218D2E47B
      E3AAAD39D6CDF899D1912DC3B0888F9F6939B37EB3F766ECBCB313BB1D776391
      E662C4A724327C44D423DCF674C3F5AB16D8BD600423B95DBF60291FFF87C31F
      F5D33CA761A6F34CCCBB3A0F7F5FF91BD3D5A7E356A833AFFE0ED72C7174C568
      46A70E8CC2F2F953797C3FC79FEA585E2CF4BDD617DFE97C87EFA4BEC37099E1
      30F7B3E4F1B76E584169C378469AE2A3B17CD13FBC90EFC00656240BACDB2CF4
      33E887F1BAE31196F880E7BF90C8077076B082C6CE498CF465C663D5A2193C7E
      A8FF906A56380B836E89B42E77F81B3985B98CFF5233D2F1243A0AB7AE99405B
      6A1DF40F4E6564A1FC0736F0F1A3DC46D58DBA3DA261B1DE8CAC7CD27EE5E4DC
      E775D20BDCB969024BC555B09698D94E37D4A660C3D27FF8191E73537E32F85E
      F4829AC4E3B749B108B8A5871B0A0B715D665687723CF32796CE9BA2C0DF7FC9
      DFCF9B96CDB8AB7270F2270DC909D95D495DE28FEC19937E3F419801FCFD9F4E
      43D2A94B3ABDD88D46D066131C3F5DA931E85A7C9DC3B9E29EA4CD7CFB2CFCD3
      EB68354087B9B7DC1C71F361F9F33B2DF90146AD4D765A37BB62F33FBC316DAC
      AB417DCD17E47F7CDB501671BBBA3CC1979D1D7B0B99C146A83092AD8583C9E8
      4EF8DEA539195FB8E76ACDA931A84E8D4241A23732C3CC90EEA68E8F3714D170
      41FE73477C7156DA9D96E6A636B8B116F5E93128490943C13337E4069B21CBF5
      0C3E5D554289B1526B8BBE86533BF6DDBB015F8AF3EA79278AE505A8FDF81CC5
      49FE2878E4805C1F3DE4DE52C327A3A328325344CDD9638DAD7A9715B97C4561
      CE237AAEC82BFBCB4054A73D45719C170A426C90E7A2891C6B25E41A4BA254F7
      18CAC497A159E168030C0CE65516168EADAB2AE75D7B36BF0E475DC60B94BF0E
      4549D46D14F95C41C17555E45E9144B1AE38CA1456A1DEC30668A8075B4EA6B5
      A6B22C89CBB67E8A471D515962008A1F3AA0C04B0F05D68AC8D5D88E2C992528
      393413F54E266DD7B705B9808C5C55ED97B2BCBACA627AC10BD457A3F155284A
      A33D5178D708F916F2C853DB802CC215EC9D8ABA1B7A6D86AAC8B5949C2C7536
      2B3D3D7D4AEE939B9539992F519C9F86DA3791A88D744591A3160A2F8B215F72
      3172764C469D8D669B8DA64640E5782B74747E64FCF7F27A3FBCBA59CA6667A0
      A6E62D0AF29FA1D2DF1AC596C7517072330AF7CC40F59553846D251524BA788E
      8D2B57C6B76BFF97AEFA78ED598CDAD7C400B9CE61A7A1C15907454716E2CB45
      79A0A5A5ADDCB6666C985ED9D2691F8E72B2439C7B05EA5E938BA8E768763125
      0DC2E953DE2E80819E6EB763E8914E5FF8DF7447A46B0DFB09612AC875DF2372
      0D734933E09B9ECD7174FC11EE3702A173B215E74FA57CEB733D3DD5B973E71C
      3534344A3B50B69A9ADA82EEF8B367CF563E7FFE1CCF9E3D434C4C0CA2A3A319
      F9FBFB435D5D3D4287B43357478F1E65442F79B8BCAAAA6A05E57C7D7DE1E3E3
      036F6F6F787979312265AB5656566E5152526A51545464A4A0A0D072FCF8F157
      5C9EEC973F8E8AC2DDBB7719C6C3C3036E6E6E707575C59D3B77101E1ECE942B
      2E2E0E2F5EBCC0E3C7E43B595ABA99CB93FC4A1F3E7CC8A4757777878B8B0B9C
      9D9DE1E4E4449AC09111DDA761348E4A5C5CBC8977DE222D5D1242AE31B92C4D
      7BF3E64D383838C0DEDE1E376EDC60B6F4F3AD5BB7181D3A7488C793BC8A0202
      0218D64D6523DCE416752B1799057093995FEF21B72085E45574EFDE3DC6AE9B
      DC42E493634F4162489B5E85203FB163E5BEF0839BF45CF6DEBD7B0B68DD69B9
      5C49DE456F23F121D80A1F822C89ACDAF6DBC91A19A1B6C88F0F206598D7B273
      E7CE3C57E26F5A3F3785A5287E17850C72CCEB4CE9016648BDA78FFC8420CA37
      6FD9B22597FA96FAC85379054ADE47E3D303FBAF94116C83345F63C21A22DDCF
      94D42D94F28D1B366CC8A6ACBD8D39EE91E35C6EDC3D526E6B7C08B422E94D90
      72570FC99EDA48F6B8C0D33BAF4BCCDCB09BECFCFA8D1B377EBE7EFD3A1C75E4
      F0D05C0E990F6F3276689A77772E76A8146F5D247BEBC3436E61D6C60D1B3E5F
      D75660DAE5A9F951449B1DC6539303DD2A50633DB13FCF516CFB5A96ABF45CFC
      0BE5DC969C3BED7F3AFEC3C2C31D42C3C34BBE5268E8E7A0A0A0B9DDF1A16161
      95E43B001F3F7E6CA7C4C4448491BFE0E0E01F044538DEF80F0A0EAEA0F3AB05
      0505ED94939383888888EA80C0C01641058784BCE6F2BE7E7EE5B9E47CB1A4A4
      A447A2F3B9F77D7D79E3FFAE8F4F29B547E7757BA2B2B23278797BF3780F4FCF
      129A277D1EA627A2F39BE458C1E3C9B82FA2E5A273CD3D515D5D1D5C5C5D1BC9
      98A927EC3B326E8BE83335F419939EAAA1A10135B5B5B8616FCFBE6E6F5F40E7
      B8F8E7BC7AA216F29D6A6B6BDB4294477DF2AD3C2D8785854533512EADFFB7F2
      8D8D8D30313169343535CDA6F3F2DFCA33CF77181AD613FE336DBF6FE5699F23
      6C16E5F3F3F3BF997FF4E811FBCA952B37CDCCCC587A7A7AF856191B1B6791ED
      347A0DA077C5F0704F9F01E0E830FFFD071AF62D7F9CFB6F430579FAFD1A1F1F
      8F972F5F3222C710949696A2925C93D1BE4F7DCEC7FF2CC8533621218111FD0E
      A77FF4FB9B8E19FA4C55773CE55EBD7A85A4A424D03661E6B239F3EE3DE1E931
      8BB25C9E8A969FE6514BC64B773CE5DEBC79C39C4BD03E4DCF35E8D8A45B3A6E
      E9B8EB8A7FFDFA35236E998B3973FE159C7B0FDDF1D4367DCE8CF2DCE31DBD67
      4245CB4EC74C773C2D3B2D33AD372D37F7B845F7E9B36F5DF16FDFBEE5959DB6
      7925E79E0BD777DDD9E7F25C968AFA8D2B7EFEE7E1C37F13E469D9294FFDC5F5
      3B7F1EF47357F6BFB1FFF3F3FF66FC89FC27EEF775F49D1C1CFCE107CF7BF1FB
      AF3B3E08B4BD119C69733DC0BEB2A2E47ED6E774C4C73D95E09B73F88A25BE13
      3132F3B436B5BA1B6F68E29E6A6EEB9AAFA37FB5352A26B625E471646B5EDEE7
      96C4E4577EF43B9C9FAFAEAE14ADAC2CCD282F2BCE9157BBF45841CDB05CEB9A
      53E5650B1B1C9439093593ABD0F7F047F8C330725C08809AD58D877C7CEF97AF
      5E3ECACD4E434ED67B9CD137C6EA9DE2386E648D8BF6EED0F608C0A95B5E9030
      BB8E3326163870C1003B2E5C69E4F2D6CEAE9E57ED2C6145A4A26B0465135B9C
      7524D70FAEBE50BDE909C5ABCE9034BF814306D6D8AD6382ED5A46D8AF6F052E
      2F6D6059BE43F1340EA86932ECA53B81D074F385DAAD3B50B2BB0D290B7B1C36
      B2C19E8BA6D8A669887D7A96386A7683C72B98DFA81455D182B8963E346E7A40
      CBDD0FEAC4BEF23517485B3A40EC8A2D442F9B61DB7903B235C71193EB90B5BD
      CDE34FD8DDAEDC7FE632A4F4CCA16EEF86D34EDE387EDD153256B7206E6C877D
      BA164C99F75C328318F92C63E3841337EFF0783547EFCA435A57206F7A0DA708
      77F2863BE4AC1D71D4E41AF693B2125F613729FBE12B572165E508657B4F9C76
      F5E3F11A1E8195E2972C709CF8E9849D0BE449FEC74CAFE300F1D14E6D634607
      0D6D206979134A246F7597FBB870378CC75FB8FFB052D2D00EAAA48D146D9D49
      3BDDC041E2EB5DC4D7D4F601B22F61E100C5EB6E50BB7D0F5ADE21D00F7CCCE3
      2F87C456CA98DDC459F700C892721F36E4FADA88F8DA8AF8DA1EF276AE38E5E4
      83F37782A1EBFF08A60FE26AB9BCE1A357950A362ED0BA1741FC7D13A2C44F5B
      89AFF712BF89937AC85DBD0D15476F9CF30CC465BF489884C77EB479FA7A0197
      F77C95FE2E223E01768FE270CCDC9E69E3B676BA46DAC9192749BD343C023E5D
      F27D606C141CBD907BFE4AFF5E27BD607DCE4C475E5E269E24BE6CA5E9B9BE96
      B6764C53B6BFA3A7EE1230BBC367FCFFE113F2F33F49DFF4F31BA8EE167C44C2
      EA9689A4A543B7E7F6F44F4941C9E088D81198191B23EF531A8AB23EB629FB13
      51268A72B3509C978DE202728E5C988FD7092FA020AF88E3CA276AC835F90869
      49598B756BD7C3C6D212356505F852F899A32C7C29CAC697E26C5495E410E5A1
      9AC4677D4C87B4940C23C2FF71EC98A485C4314958995B80CEFDB15B5B386A25
      E739AD6D733EF49C8784D1F9B9CCF454D0F454A74F9F9E70E4C8518B2362E230
      3731414D7911C7569BBE141315D1727C466561262AF23FE143CA6BD0F454943F
      78F0B0C5A1838761626488AAD23CD4569670548CDA8A62D4549073F3F2025497
      E6933C7391FA261E343DD58913A7271CD877C062FFBE0330BC7C19C5592928FC
      F886A3D78C0A3E26A120839C0F7C4844417A2292E3A341D353292A2A8E17DDBD
      CF4274CF5EE85DD461B8A24F7CE2E45148F8820FAF089F80A46711A0E9A928BF
      73C76E0B22EC259FE5A4A4207D4CA24B491E3B069A9E4A4A4A6AFCB62D3B2CB6
      6DDD817F237171F1F19B366DB1D8BC692BA80EEC3F0473338BF622ED6A4174F1
      E225AC58BE926815B8E9F7EF171FBF76F57A8BB56BD6834AF5941AE85CC8B56B
      D771FBB60B626363997921AAC8C848AC59BD0ECB97AD0437FDEEDDBBC7AD58B6
      CA82865129291D27D7049658307F1176EDDACDCCDBD0EF6C7219C9CC0DAD5CB1
      1A4B972C63CAB07EDD466CDEBC79DCA2058B2D162E58022A05052598999963D6
      5F7348DC16906B4D661E8ACE29D13999450B9760FEBC8558B5722DA9FF4EAC59
      B366DCAC59F3CFCC9E350F54B232728437C3BAB5EB40C7143D07A5F322747E80
      9CE763E68C59983E6D26C9631129CB1ACC9BB7741C7D8E68F4E8B1697F4E99DE
      BA6FEF01B6BDBD036C6C6C88DFCC41CEEFC9B9BA3EA30B172E60E21F935BA968
      DA3FA74C6BF8E5975FC6F0CDFD0FD3D0D01841CE81C791F3D8C9E45C68323917
      9C48CE67A790F3B289E45A78E4800103E839F7308E86F2CFA3FD9FACB9816949
      479E64351D7D9ACD9338D1D2E00F1FA7F9A7FE4C24DC4E018CFA72F9F901E90D
      F4190D36DA0E37ADF49043CF9FEB9BA1F82CB751F1594E03571A09F9F56A2FF2
      B266FBA5EDE5F2F3EEA757D6B7B06196DB00CB4FB570FC5C8BBB5975A86866A3
      8664564DE2BE10D1CFE5444DAD689C7F3F3D9967DF2BBDEA0B09B421AC75460D
      2EBEAB82C28B3228C51743EF6D0574DE54E05C52054EBF2AC729A22252AEB9F7
      D2AB79F6BDD39B0AEB9A61935C01C3C472A84615E179511DAA5ADA6CD36D259F
      7D5AB7F9DEE9F55C7E817B7A130D6B2087DB3AA2DA16305C6A5D0B6CF21BA097
      538FD3997590FB508BC3A935785FD38279AEFFF0F39DD31BEB48FAB8AA168455
      34E36E69131C0A1B614C38CDCF7550CAA8C3A19040ECB753C7763319ACBF720C
      B34DAC787318F36FA4375491FA079435C1B5A811B6D46636B1F9A90ED2C4E69E
      807B38E67D11B6C98108CF4F82C203734C37DF875F15179830F5B749AFAF2035
      7026AC655E032E66D5E3146125D309FBBE066B8C2460F1D60F56297ECCF9B774
      84096423CC29CFD4618E595A7E466553A5C7C79AD65B1F6A7095B8D62CB51AFA
      EFABA19D5C8559E7B7C02139B8DD39BCED1B7FCAD35DD634FDD493D30D53DDA7
      1BA416936DBDA046292F8344B8318E861B30ECD1308376F6BB1349A73BD9841C
      AFC34D19BB744B3F73EBDFC33C0C89AA6899395BC3FFC4D8DBB3678FCCFFDFFC
      9C80B424B1A8AC26F127D98C8E3DFCD024E7FDB8659F835FC949DD2B927BAD5D
      474FF54B15E6C99F515F2E3FCFBFFDF87FFEE20552D3D2D04ACE417C9FBF6E95
      730B695220639FEA2C19FFAA64FCCFF26D1BFF945F6974BB2E382C1CA7BD8271
      D6230867C83503F7BA99CAE3AECF57E37FDEBD7FC6FFBC3BE955F70383614DC6
      BF1519FF476CDC61E915C0CC115DBB1B8823566ED020E35F9D8C7D15CEF89FE3
      F3CFF89FEB95DEE476CF0FD664FC1B90F1AFE09F8A8BB637A16F620A7BA7DBF8
      5C54F2D5F89FE7C5377EDDD29BE83D808EC6BF35198BBA641CAB93F12F4BC6E2
      21CEF89FEBF20F3FCF29BDD1D5C39319FFA164FC7B93F16F4FC6FF15C29D27E3
      5F918CFFC369B5D8965283D56FAB91544DF85B7CFCF5F40607524E7F32FE5DC8
      18764EC9448AAD168A2E1F439235B9A67A9E810DC9D558FCBA0A3313BFE06515
      39FED9FDC3CFB54EAFB775B80527C25A90F1FFE0BC24726E19A03E318AD9FA9E
      95C4C2A42AAC0F788E1B72E4BCE0F56B5086CBCF364DCBBFEEEE532BAD6FC33E
      AA67039F0D1351F92C9C27FA59E5CD173848ED84AD8A347CE4778130955C7EAA
      5EEAC96906A9EEE438504CB6F58E7BD6B3938D5450F8C81F744B3FD3F0351A81
      8D97B6AD6F5DA311504318EBCEFA74CA810553D20F2D4A2202DDD2CFFF1BBEA7
      FFABCEA5A37C049AC7B6404762232E7274498A6C2537E0B2449B742536E1024D
      43D20AF2942D4F8E40D99B5054BC0941D9AB4054BCF24779A21FBE906D25D956
      BCF447C9CB00268F8E787AEFEF75B003DE04DDC0EB806B78E36F8B786F33C4DF
      31419CBB11625D8C90F1D0B543BEA3F27345CB4EEB41F7353B29FF7FF57F96BA
      9A3F14D4EF81C717FE5BFEF700659551BE0A5EFF8627ACE9EF2127F1DBBFE07F
      0F38AE322AE404FE78A6C3E3C786AA2EA4EA8EFF2D40C97444B032C6C7E9607A
      BC11E115BD2837D2471663434E8976C5FF16785CE5D72025FCF6F41CA6BCD0C7
      9C0473102E7B949F62F69870358C0DEE9C1FE5AF68FA4B9022463ED5C084B88B
      F82BC1048B926C31D2571E63A3CF63E2634D625FA5437EA49F82CA2F410A18FE
      580D639E69E1CF170698FFCA0ACBDE5CC76F81CA98F45C1753A2B43B2CFF087F
      858523EFCB798DF295F7A26D45FD35F2AE4CF688FB721819A0847111A731F3A5
      31663CD525BCAA6877FE1B1DA2B27084AF7CF62F8F54F17B8C26A6C61B606EA2
      0566451B605C68D7FCEFC127178EF091C1F010258C7C700A631F9D65CA3DF3A9
      1EA64668F5803FB1F0F7A013A2A383554447079D141D43B68C48BD69D9274468
      8CFAD6FEDFD5F8F9EFDF7FEEEF7FDA0EF4F3507FE9513FFBC9880EEF50B2A2C3
      FD651776C5FFEC2B2D3ACCE72806DF17C7D000190C0B5366343C5811B45FFEDC
      0D3F9CF083EF1D8170E0310C7EA88421512A181A7902BFFACA650BB29DF2F78F
      6250B81C7E0E56C02FFEF2F8F5BE2C46DC95CEFEF59E8C17BF86FBCB2DEC881F
      1A208D218F8E33AC90EF2108058893B228336519F2E8247E0954C42FBEB22A9D
      D91F16A2D056666257C8EF3044426530E4F149861F1EA84059D3CECB2F23FA33
      F1D5AFBEB2D9B4CCC24192181C799CB1CB6155BAAEBF8C28D7CFB48E831E2830
      B6DB5819D3EEFD27B390B43FE367CA0F21B6294BC2557AD27FDA5D73531F0BD4
      F79B781F19AF5FEE776CB7273CB1BBF0FFA4730A8FBBDE316FDFBFCBBAEB7FEF
      6247F156F656A30282835DBDBCBCFAF0875B5CBD3A434747A7B79DA3E3989CFC
      DCD2DC82BC16372F0F3141FE494CCCF382E262B87A79FAB67B0629F281DFF3F8
      F8489247DFCCACCC8F0525457891F8329C3F8DBBB7A7F2B3F8F83A6F7FDFCFE6
      E6E64BF8E3EEF9FB1B565456B23F7DFE5C5E5852CCCE2EC8C3F3972F12497EDF
      B7D5EBAE62C493A832632B0B6B1236E0AB7A5959FDF030EA716CC6E74FAD1FB3
      3F83EACDFB6484463C8874F5F63C1911F598B2E6DDF9CFDCCE7A95CD0DBBFDAF
      DEBEC97AF8F821A262A270D7F75ECB154B738B1E1F0F75D07B8B93EF9127B131
      9591248FA7B1D1F00BF27FC8AD4B97ACE323912D2FB29FC9A6E4B7BAF8F8B444
      3D7D5CF5ECD9533C8F7F86FB017E0FBACA83B2BB13725F2AE4D76059523E7685
      BF64AFD4B391898B8BFDF43AF119F34CBED77D9F0EF3605D7FF9DDD617D9F1C7
      F36BB136EE03A6FB3DC734C7B0672CD29E866686D363E3A23F7E7897804F9919
      F0F4F60A13D5116D978790D78B0D1239B5EC352F3E62EAFD58FC41595513DE3A
      5B970C0DA7C73C7F9E46DF297CF32E19B6D7AF1BB5B3BF74F3A07981F1C9F31E
      BC63FF7ED5EF056BD58EF16438FEC037467F90909058141EF9E013E9236C7D23
      036B3AEFCF17DF8F357ACAAF7DC44E1E650D1E419F4B1824C8D3B09123474EDC
      B56BD741BA64083FFFFF95F6ECD9B3D8D4D434E4D6AD5B96640C0A7F2BBF69D3
      A60D1B376E84A7A767CDCD9B37155554547E127C863F2E2E4E283A3A7A201DCF
      DCF0152B56F43D77EE9CADBDBD7DCAC99327C3AE5EBD5A4FF4C2C2C22282B9F6
      246903020266070707EFB87DFBF6053B3B3B3F127FFFDAB56BCAD7AF5F17A63C
      B1FB92A4FBA0A7A7D772F9F265F6A54B97022E5EBC48D7BE62917CF79074DA24
      3C87DE67D1D2D2C2F9F3E7E9F3C3387BF66C0C3D2ED07B25A2A2A292A40E2065
      F8A2A4A43499637BAE81818105A94B99B2B232BD27D7222F2FFF4C5A5ABA5656
      5616323232F479E1C5342DD9FFFDE8D1A3A1C78E1D7B76E8D021E63CF2C48913
      171514145E888B8B33EF381F3E7C78075DA38194D960FFFEFDD6070E1C902576
      9935FF366CD8B062EBD6AD29340FB265D6733B78F06028892FDAB16307B66FDF
      DE42F67FA2C718D24EB2A40ED725252599E735C2C3C3FF207591237E6858B76E
      5D83AEAEEE7352BF8DEBD7AF4F5CBB766DFDAA55AB406CD2356E7A91321C397D
      FA742AD996AF5EBDFAC9D2A54B0F907CE33534345E6EDEBC3974EEDCB90D0B17
      2E4C9B33674E09D98F98376F5E0BD9C7ECD9B3691E9EA49C19CB962D2B9A3E7D
      3AA64D9B86193366CC2676E5FFFAEBAF3892A674EAD4A94D53A64CD15CB972E5
      1212F73711FBCF3FFF0457846193787014C4ED07248F59442D93274FFE42CACE
      5BAB72D6AC59DB4858C3A44993C0D5C48913A98288DAAD97B765CB9645A47DEC
      04C3C78C19F3E3840913E4894CC78F1FAF396EDCB8791DBD6342B4E25F8E1F7A
      AF6DCDFF60FC8DFE1FB07D3A8B236D30D4C7C747EEFEFDFB0A5DC9DFBF4D645F
      8E32DC730ED21757B8E979407BEB655CDCA20FFD5D263017B7C58BE0B6B516BE
      7CA94455D5178EDAE6C329C3CFDB9CB083F40C45A86F3A87D3EBCE4371B60AD1
      29BC8E79C33C3B469FBDA3AAAD6DD357BCCA75484D5140716131F3AC5FF4FD67
      5098A28200EB60E6B9ADFAFABA76CFC00AF25627ED706C962C52925398F2E57D
      CA83DC9F27E074CE95494F9F9BA35BEE3A6E5FD93F750D47A7C9E0EE0D1F78D9
      DE85DE1123C8CC5182EF8D00E61940FA7C285DFF813EA74CCB23C85BABDA416C
      B2248E4E9181C49F7244F230386082FADA7AE639D716CE1A704D0D4DCCFE57E5
      57BD8AC35324F0D43F062F231391F4E40DAEABDF84C319273CF67C82C6FA46D8
      293BE0F6390F3CBBFFE26B5EED2A0E4E1147F5976AA67EA58565F8F436136FA2
      9371F5C40D34D436C05CC206490FDFE04BC9970EF903538EA0B6BA9629675A42
      3AAEAA5E4752D41B5C256D43CB9DF53E1BE1B723E17CDEEDEBFAABDBF1785ABF
      574F92E0A2EF8610A73098C858A0A6AA06160AD6B863E24D7417E498B78C9FAF
      A9AE61D2707D45EFDB146615A2BCB81C053985CCB388F4D9C484F804FA1E472E
      F37DCBC773DB96CB73DFC5A261F4F93FFA4C25DD7FF4E8518D9090D010FEF36E
      CAD33E499F37A77DA795796E85CD7BDE92DAA6CF94464545D59063CAEF82E7ED
      94A7E9B8F60579FA3C626C6C6C3EB13BB8A3F3FEDF7FFF9DC9A333717CF55367
      D70DF4194F5A46FABC63E6FB14845818C357EB2C7CD44FC2EEE821D84B8A31FB
      342CCCD214290909CD57AE5C99CCCD87B2591FD2E17D561577A48E2040EA3002
      A5C518FD316C0814972EE07DF627719E243F9B9D9B6374D6AE1D41F9D417CFE1
      A124039B3D5B314A5888D1F45F87C37CC7267CD7A70F447EFA91C9477BFD2ACC
      1AF92B133F66B008F6CD9C9A67B669ED5C5F1D4D26EFE3CB1661F42011781ED9
      87A5E34663948830FAF6EE0DD7C3A25832F677FC3D6E0C7DE090C9F7D48A2518
      F8E30FB0D9BEFEAEBB8234C36FFA7322968F1F035B528E71430663F8C001183B
      6410133761E8102C1CFD1BBEEFDB078E077661C774F23D35FC67D8EFDAF2966B
      7FE2B0A118DABF3F9356F4AF69109BFB17F6922DF5078DA3F6FB7DFF1D93E78A
      0963E1B07F27633F2DFE055CE425F13DA9ABFEE6B53C5F096AE58471D8FCE724
      669FE6797DF7E677B4FED4FFC98909B0961287B3D8BE76FEE797F7D1FD8C5CC5
      0FC078CBBA24AEFF939393193D78F0A0DAF1AA6D9D99CCB166F3C3FB5A2DF6EF
      6EB5DEBB836D43647550B4D5FAE8C1D6ABCAF2CD37ACACE877FE84FFCE63FDEF
      9C338BB2DCF247C4958DD7C30CD667055D5E53EFA7B3AAC6E7FCF2CC3B1A7F9B
      BBABCEE976EDE187C69B83C2F4371804EBAE4DF4D759857B5ACBE1A5B114EEA7
      17C3F9D442EBEEF870C30D9941BA6B03FD2FAE2AB8A7B5025EE7FE665817D505
      703C31EF7D773CB1AB177871F5B57B17565CF33EB7F49AC79925845D4859D82B
      CE4EFD8A21D70E91A69BF41F186E7C17ACB7AE30E0D2EAC2FB1756147A9F5F56
      E8796649A1ABDA42389D9C0707A539B826FF57AA6A111C550B91773C1FF6CA65
      107A6CB65521C2682342F5D721F0D26AF86AAFC4DDF3CBE07976095CD5161176
      3E1C941996EA1D61FD95F301D95CE06836CE115FBF08D55F8FC0CB6B18D687B0
      77CE2E851B619D55E6E32661AF2BCC62786BF515968A79F8229D038867010732
      F13CCC707D056927F8515673791BABBEA8D4F9D482D09BCAF3426FC8CF0ABD26
      3F33C4527B8F9EC2E77A47896CE0F06760EF276047064A822EAF2D61DA49B3AD
      9D6E1A8999A8E637DB9072BE224A52C94792521E926472D07894D83C9809ECF9
      086CFB00AC4F430561639976D220ED746671AE5A412BF50FA84E1400F2A49E92
      C4A618B1B98FD8DC99016C4E07D691965891424E47B45628799336F6206D7C5B
      75A127E1324F115689E3A363C4E621625394D8DC4E6C6E4C0356935EF0F73B60
      693214829537FEE07176A98EABEAC2378E27E79A9E2CC067853C408AF8E808F5
      D127A4129BA95BD291BA3E15A92B5390BA2419EF880CA6BEC357730972B9F8DC
      CE471FE0BB290DBE6B52E0BB2C0536DDF53FD22E1F49BB603729EF5652DE0DA4
      9EABDEE1FDDF6FE14AED76C7EFFD0843AE8FD61276392138E57522BAD41DBFF1
      037ED8908EE36BDE238EF8A862C93B1413C52E7E07E51599F86ACE20E3A11FD2
      7D9DD8392F1ED3F30E3667ED3276664C04DE795E63A73D0A6A172EB8FD1C1584
      3786C7D909D617E8B90B13DED8D0C07E76491151B21BD9294F23DA736DEF2FF1
      B65F8AF211AF23C37EAE2981D29CCF4CBABC77AFD8F796FD0AEFCD7FB22B2BCA
      E9B3C06CB43D17CC464B33D82D4D6C343782DDD4C064F5DCFC3C1E49AFC72BD7
      ABCC7BDE2FEDAFC06B6E3F44EA9F425D4509CA733E71F491515D39E96075E540
      7521739E951AECC5BE33A71FFC8EAC60B7D4D720507C39FBDED2C1F8F02C829D
      FFF231DE999F66279BAAE1ADF129F69B2B2A7865A2CE4E0B7405BBE233530F52
      07F69D0503E1BD5888FDFE6908C2B68E61071F5980BAD21C76EEF308BCBA2CCF
      7E66A082B761F7D9B1E69A08DD39931DB06D1ACAD29E33F52227C878ACB61B11
      9B7F41B8FA6E3C3B3801CF6DCF80FD2517D931A18856DE816085EDCCB9614E72
      22BC1788C075F13014BC7F06343780DD50CDFE18EA4206E974F63BD5C578AFB6
      88FD29C61FECCA2CF687104F78CD13627BAD188908F5436CFF5D7FC165E97076
      ACB7131A8BD2D968AC01BBAE825D539081F7DAEBD9397AEBF0DAE410BB21E715
      D8E59FD829F76EC273665FB6FBDC01705B3396EDB16408FC570C61872B6C4065
      66129B3818A8290648598BD3E391F52A12856F1F815D9004947D40CA3D07F8CC
      FF09F70F2D62DEE3292B2E44C4D17988D937166F5C8D085B42EA99C7467926D8
      25696C14BD053B3F818DBC78B08BDFB3D3FC6F51BFB0C3E457A1A2AC845D9495
      8137DA3BD8A9E4FB20D1FD0A1B55F96DED509A0E7651321BF989204E67233B16
      ECC2D7EC8FC1B7F08AFAE5D4227CD0DBC9CE36DC863CBDB5EC24833DC84C7CC8
      46C56716655144065AFE2B20F73990150DD2B1D1921387BC581FC4599D40BC9D
      3A12ECCF20F1A6065EDE314326A967C3E738FC6FFAFEEFD3A7CF88DEBD7B4FED
      ECD8D2AB57AF9F499AE5646B4A50BA8EB73B0D278C0809FB936C6F93F8B70307
      0E54215B614176D0A0419E24BC94EC336B2B52FDF8E38F5643860C2921DB72C2
      37D33072ADD3D0AF5FBFAD7CE5EA43E2E4C9A686C3B1B9DBEFBEFBCEB73F39EF
      A69FB9F992B474FF161FBF92E4FF9E13CEB34D45E27EEDDBB7EFE19F7EFAA99A
      C4F1F21516163EAAADAD2D3C60C00079A242CAF1C773B79CBAEDE9D58B55CBCD
      93DA21F9AE229A48F613386C3BBB5C917021B2A5EB39B672F325F561131FEE24
      71D11CEE2BBBDC2D891F42142890EF176969E9BA8EEC75A021C48781FCF99232
      3791EBCAD6AEECF26D85487A674EF9F9EBD513DBE0F86F06D9FFD8437B5FF99F
      D3071793CF6F895ABAF27747F6F9FAE84C12164344D7D6A6EBC497766497F417
      F6F7DF7FDFCE3EDFF5D018A2E9746925BA342C87BB439739256AA0E522657D40
      FAC64BB26DE9E2BEDE4F44591C5E974882A886F095F4B51D22FAFEDB872E78BA
      36E0A51F7EF8817E3843B49FA88AF0AFC896BEF74BD7108B14E4BCBDBD57F9F9
      F9D9848585F925242424BD7CF9F2756868A83F09B3F5F4F4DCD0993DC2997DF8
      F0A18CCEA5D0B984C2C24266CE8E7E67D13915E6771348DCA74F9F2A7D7D7DAF
      73DF81A2F7F2828282DEBE7BF78E79DF836EE99C19CD83CE7F70E7DEE877079D
      5FA1E1743EEDF1E3C7E9172F5E1C6065657592BEB34AD710A1736C348E3B9F41
      E71FD3D2D298F77A33333379F370749F9483BE977189D4C981BE67CC7DF795A6
      A771595959CC7C1D15DDA761F41959FA4E094D4BE784DCDCDCFC9D9D9DEFD3B5
      37F8DF55A1E2AE174245F7B9E1F43D14FA4E09B579FBF6ED87E6E6E697C97186
      59FF83AE314BD73EA1363A128D8B8A8A62D6CAB0B5B585B5B5F535BA2E8AAEAE
      6E297D6784BEA3F2E8D123A4A4A4307579FFFE3D525353997D1A46EDD3753EE8
      BB28C78F1FFF62606030E4C68D1B3F93F215D33534D4D5D599FCE99C175D5384
      96932BDA9EB48E1A1A1ACCDA28898989D9727272C28E8E8ED6F45D6DFAEE33F5
      51444404F3CE0D5D4785BEFB42CB4A6DD2F777E8BBD8DCF51D32323268FDB5EC
      EDEDC3E93B3FD49FD4AFB49CA41F316D44D76CA5A2FB342C30301074AD159A96
      CEA9D9D9D9DD256DF89CFABF23BFD1F252F187DDBF7F9F6947BABD7AF56A24F5
      3F7DCF86D65F901314B70DA89F89FFE8BB3ECA1CFF67585858306D42D3D17AD0
      F2D1BA5051DFD0B6A0BCA5A525B3A68BB1B1F11B5151D13EDCFB57262626366A
      6A6AD5B4FDA8AFA9CF695FE1F617DA26D47F2A2A2A95A4BC469D8D434D4DCDC5
      C41FC6A43FF890B1F182288EEC7B93363024ED3BE75BEF1DFC35B574DEB73C73
      20A8E9D38BCFFC5B7EFAF4928333A7151DFE37FCB469456B674C2B66EE7B2F5A
      94F3D3D4A9FF5CEB75C7539B33A617B94F9E5C358494419AE435A3A7F667CC28
      919A39BD38E6CF3F8B0710FB1E841DFE2DE59F31BD24E2AFA9454B4819C44819
      DCBEF5990F6A9F68EBF4E9458B664C2FAE9A31A36CD4B7FA6FC68CA223A2A2E8
      43EAE145F6E57BCA87ABB3FE78A443D7C546AFA953BF0C26E5D83F6B4A3E73DF
      2A5685F553842A6BDEA3D3AC5182FC4355D6B2876AAC844835D6DE0835D69A08
      75D6864875D6A6E05342AB235559EB6918C9B7EF4B19D677249D4F47F669FE0F
      5458D31FA9B226130DF512657D75CFEBA10A6B24B171ADB3F23376555936C4F6
      C587EA2C13223B925E2B5899F543F869D6085A165A0E7E9EDA8B38C59AC8B5F7
      F0346B3EA71EB2249FE5013A6D6BED31F96BB086449F66DED5E3FD9174FAA44E
      1ED4169105F18526E12448F87E624F85DAA7E521BE3BF4E02C6B19F57147E5F7
      D2617D4FF8F124DD9607EAACBD8FD5581B485EEB49DE3B49F8512A1227FEE864
      FB7503047D34695C3F89C9E3FA7F9E32AE7F30EFFD86514283A78CEF7F9A84A7
      139591FD3B13C7FE34BFA3BE43E24F118128892FCC831346D5CAD97E9930E1A7
      AFFAE6E4B1FDD5F8F96963FB0F27FB4D4CD8F8818BA78CEEF7EBE4F1036E4C1E
      D3BFC3DF2AE49493C733E9B9B6C7F717EFEE7845EA7D86A69D34AE3F6F8D30C2
      3DE62B7F14F151A7EB1A91F8B39C74093C9F4E1A3A90FA932F0FF6A4F1FD6F4F
      FF5D7850177CFC576D337EE012121EC9CD87E6C13DD713E489BDE7BC6321F121
      FD199B7F7CDCCF8A9347E1E47103764D19D72F63CAD8FE62E3C60D122661FE6D
      7103EE71FCA132795CBFEA296307F84E1AFDE3D8F1E307FC4CE26F717D41DACB
      89AF5E3C4D19DF6F07E5278EEFB7917C6EEC38CD80FD53A7B24899FB5D209F5F
      926D34F17B040DEFA0DEAE44E544F5340DA9C3D6FFB7D6C0FFEF33B3FF57BECF
      B097E814FD0927227A2D49E7229E11E5105570D2F4E7A4D92BC01AF25D53A672
      9EDFCAE00B93E484A5F2851972D83F89E489D4899A3871D544FE9C7DBA4E893B
      270C9C34EA1C86B28339F904F4F07A9F2A80C30CE6BB66D5E2E42745AF13F9D2
      72AF7D2B39717F72D28EE1ABFF5C017F8CE6E441E7886E71F6470BA499CBBF76
      6D07ED31854886A3291DC40FFC6FBFFD8FF47BDACF36FCDBB500F8FA09EDEF6A
      743EE95FF25CD1DFF773229ADF439EFE0ECD0DBEF1C1AF979C79939F7A900F3D
      2F93254AEC201FFABB876644137B58A679440E74BE46201F3A96C28976F07F1F
      77918F10679C277550267A5CD2FC063F2FE08CC5DACEE6BFBAE1E979A33251FA
      B7F09DD925A2F39337BB680B39A2571DD49BF633557A3CED80A3BFAB70BD83BE
      40E726E91CE746C17ECE7916881E9F5F74608BCEFF5D211ADB45FD2A3BE0E86F
      2B1CEDC933BA7C0CFD3D04E79EF67B816B313ABF37F43F702CF891F31D25D4D3
      7795F8FC1EC5F9CEA401159CFE3FAD07CF888CE6F8B990D3AE74FC6B12951115
      138DEC86BFC4B1B98963AB96D3A6B29CF0F3DDF0EEDC796C019ECEBF2EA1DF91
      DDF0A7387694F8F96F78D76B38DF794120E7FB7EE437FA9FE661C5F117B7BF3F
      275AD6139ECF4E5FCEB874E09C6750BFACFB96F3473EFF4DE3F071DDD45F8148
      4390E7EC27723E77F51746E7FCE9CF5B08D817E6D425A51B5E92E3B360A2F11C
      7E2C672C82D3BEDDF95F9FEF5C8DCDE9C3746BD9DD358AC07D03498EDF15F9CF
      79FE8DFFBFA5FF08DE3710913FB14DE4B2C90E96985A7FD669A38183AED86C11
      56D3941C34674E97CFFC0F9439B37490D96D0F114B8F9D8271C2B783E60E720C
      7A262C7F56AA235644D5E4A288E9DD98EE8E512236814E2267ADFCDABDBF21A5
      BB50C4E2512E4BD98AF7CE84B082B1AEB0E4450D91BF568870EAC53BEE8B5846
      BE1B74E4BC122FAD967FEA6005D3DF98745B65FA89A83844083BE7B50A3BE5B6
      0A3B7C640BABB98488C899F3DE271251775F2E6C95D428BC74F3A081D237B608
      A9F8F2D6F21056723316BA590B219B8216666B5F05E123E6A182F51032CB6812
      3A6868262C7EFBAAC8C16B0EEDFCA8E0BB98BE8723ACFDBE56C89CE44124BCCF
      FC6A3B5E8F94ED9853ACB0986FBCC8765BE776BE5E2A3F4E48ECDE3BA18B84E5
      6A9BA916AF8DC5C2FA0B5DAC81B0546889D09EA044A1CD8E71BC7C375A5D1CA8
      90C51E78AA065C09893FFFC26289F2CE5784B739D931E107234A84D7797A0CDC
      F39A1EF7FBB044BDFA0C3C98DA34508A707C12FEDB589AC7CE3F3F77E0C1F74C
      1AA175AECF062CBCBD6BE0CE1A88CCBA64397089D3B6817B092320E1797AF603
      FF523F2AB4C8D67FE08ECFADDC70A10596CCFCEEC0C5092503FECE64F79FA2B9
      66C0862A0CD850D3BD56A5350F98A1F333E5074CF4DA37607639064EF1CB1D30
      F75DED804524BE1B094FB13DDDCEE763BC35064C28660B8DBF7B67C05492A653
      5583A479D0E1F8197277C7C0611E2103463C4EE8FF5B35FAFF56D35EA33E370B
      FDE2A0D4F57738C831DC61F0C041BE5B07083F491D20FCB278A048D06321913B
      2A2222F745BA1B5F7E9E76BFAD5BB574C979F5932ADF7AFE7055CF2EF6FC9943
      71EAA7C4D78485DEB27D9BE4B7EC5BF8A12CA51D23595639ABE7E8F8AD5D74B9
      C858EB45FE86F9E93F7F4B1EBF0E3CFCC7B4918E3759ACA97FF6FB6EEDB24103
      764ACF9C608371BF2A3C5939F3994B4FF25832CD3763DA6453DBAD1B2B316284
      E8B409135499738B113FEFD29EFEBB3E168FF7B9D7153F6B8ADDC1897F9C971F
      3751F5E2D6FD6C6CDC51822143964EFFFD9723BD860A2F63EEA1FE35DCC2A733
      7EF5E2D7AF172D0EBC3D7A82BCC384E9DA0F7E19B1F7FB65CBDFCAAD58188705
      533CADA78DD0311923226634ECA7A5BF7478DF64BC49C5A81127FDC68D779515
      16323FBF75FB8B38E18152763F7E3FE1AFEEEA3E5EC4C6EF47D6D1B7E46BD9CC
      50D7A7415A6AC7C4CAD244F39EF86DEA7791A97F8E38516B6DADC5BC3B79E3BA
      C13AAD73A76627253CFFD81DDB9BB5F190B5959A7B64B81B73BFA8A9B6BCC1DB
      CBBD88EEBF4D7AD5A5BF4577ACBC4CB725B9AFEB0C75B52B76EED8B657E58432
      F3DE507870E0E988F0904E7D1D71CF5161DD8AC5D7E7CF9A3969F182395A96C6
      06BA9F52922638395CCF38B06FEF562B53631992D7D6CEF8CB1A277A057A5C2B
      5155382676F4C0EE3FF7EFDEA1E270D502AB962D3DA57F494BE473DABBB0EEEA
      7E68D7E6F1FA9AA7202B267AF8AAC9C57DE207762D529439BA7CF3FAB5BBCE9F
      3ED5E3DFFD183E6C489FDD5BD66AAEFE7B91CE9AE58B771C39B07BF7C279B3BE
      FF9F5E1758884E9DE3A2BCD6DA437DFB2BD39D9394BA4B6FB069CC8F44D389A6
      7A9DD979E799FDE99A143F33B81C5FEFDA0D37C04375CB9D6003A9BC484BA5E6
      484BE596F85BA79170F3241E5A28169278A1CE58CBBD53C7F8681D480B379144
      C8A57D78A07F10912647F0C45C123136B2786277EA8BEDC1998B3AB1DBE7EEF9
      7D6F832E1D4480F6EE0EF978FB93F0D7154FA16514E49D14569906E91F63FB9E
      DB8EFB5ABB10AE7710B157E5F0D2FE38126FA910F604E26F2823F1B626ECC4E6
      1C17E403F48EBEF539B3195E67B6C1EEB20A62AF9DC02BC75378E3761EA94136
      F810E184D4603BBC7239079FF37B0304CADEDFFFB278C5BDB35B116840CA7B53
      1329C1D790FAF036DE3FF626F2424A842B5E7B1B3179061B48BEE4E71DA4975E
      08363886585B39BC76D3C4DB484FC4073836796B1DA87B72ED4CA3D7E91D9FED
      2516DA3FBDA55D92E0AA851043C976CF60FB5D144F7962AD8C48ABE39F030CA4
      C36EAB6C31BAB26DC224BBC3B30F859B2BA5277AEAB57A9DD95178556CF6F178
      A773F5A157E893B9FFF06E2A9BFCDC4F6D7525F518FCD59A42A253BFD7DB3076
      86E1D6714BC9375B2FBF4B62914FAEA936D81D5DE06CB865DCC46FEDC79E6777
      47FB1A49C35DE7081C54779519EE9C24DD53D65CF4CFD5AEE7F6D6DB29ACCB36
      DE3BD38EB0D6FA5BC6EDEAF177A3D4B23B37D576655DD93DF57807E7DCBDBA93
      FED6096ABA9BC72EE20FFB4FBC7FC1FDFDB15F7FFD5553E2D8D194F5EBD7FB8A
      8888D0EBF0838B162CF03EAE285BB063EBA6642D0DB54A031D8D560D75958AA5
      4B1707F05D6FCDBEAC75BAD5F3EA45B633E9FB1EC672087036653F09F1C25D2B
      55389DDF8607CE3A7819E60C0FBDC3B0555A0C1F3B4DF639F513F4DA6CD9CEED
      5BE25D0DA560293B87A717C13761A3B4A85D1855A49B3EBC8C8E31FB1E86C7B0
      4F74778AAEB646B58DE2425E1ABB137F23C2E5F2572C57CF03ED99EDD5E37F43
      43FD64B5FEC5F38D56F2F378F1774D65101FE28898FBD6F0B33ECE0BA7695E04
      3920ED45185CC831C25DEF104477EF7CB37BD7CE04373D315EBA70476D78EA8B
      C1DF5605CFFCED78E137CF6CC423774344DCBE845B6737E1DE4D03F6B061C3F4
      89AF357DEC75D9DC7461B7B470436D0DB31FE565CAE36D9597E0E95D7326DE59
      6B078C75CFB772AEFB1739DAE8F3D2F9D99C808B8E28B31F7DCFAA5DDD1F7B18
      21CCF102C23C2CD813274C70E1B4DF77C67A5A2DD60A0BDAEC90F689F5B585B5
      FCFCAF78BB93CBF131E9316C4D2FD36BDB49BC6744FE9AE9E5734D9BA9838DE2
      22F8B9D921C8E736F1E3ADAFFC9F1CE307073B0BB6A9C1C5C69933A64570CAF0
      ABD1A5732DB4DC215E3770F98206BCEC8D90F23C8CE933FFB4ED72A4BE8C84F7
      755D385DBD82897FFCC1FB5E277E3CA6282BF965D4A85141C67A175AAF5BEAE3
      F0C17D2D3EE60A3CDE5DF720766EDBF2A977EFDE74CE614117F360F43ECFC8D9
      B367DF71333DC96B1B77B393ECC58B171BF574CCFFF1C71FBA2EE66778BCC775
      7DFA6C678FDF01EED7AFDF963B37CD199FDA9FDB090B633DF6B7DCF7A0D7F22B
      972FF32563A4969CC3A40F1E3C785137D70E3F11C91385107D26AAE26C438914
      69BCE0BC021FBB9828878674211ABF589027FF6710D5F1A5237D1B2E444789FC
      04F2A0E96609F08F04D25809D4CB5320FEF13FC74EEC1488A3751E28C0FF42F4
      4520DD760E7F4B203CB813DF460AA473E0F04F05C28D3AE16F0AA48BE1F04502
      E1EA9DF09A02E9CA387C8940B85A27FC7981749CDFBF45AC40B86127BCAD40BA
      671CDE59203CB013DE57209D23873F22104EDB4960FE0B43886A05D2EDE3F0BD
      895E09C4E90BF01705E2E3E8334E7CFD6F05A7CF72E31B892C8936135D2162F3
      C535132DEA60FCECE2F4BDAEC64F25D1A6CE7E7F837CFA994897E8355F7DE936
      89E832D1D08EE605972D5B0641AD58B102AB57AF965BB366CD21BADF511A7E9E
      3EE72928C233EA288ECB33EB4F2F58C0FC7E1B5DC362F7EEDD3CD1675AA9F8C3
      A8685ACA30D777776FA3A2AC0CC92F63BE4A47F313CC938AA6A50C65991B547C
      F67B22AE7DCA06793AA2203707AF9F4763CB962DED74ECD8314682E1342D6528
      CBFC86EC8C19B876ED1A366CD8D04E7BF6EC6124184ED35286B2BE2E0EF898FA
      1E89B14F78FEEE4E342D65284BF318376E1CE3E78EDAB823D1B494A1ACD7AD6B
      78F3321E2F9E3EC2C2850B7B249A963294656E5E0C1FCEAC774FD710E117D77F
      82E1342D6528EB76DD1671518FF1ECF143C627FCE2F282E1342D65284BF31830
      6000FD2D30F0AF41D295685ACA50F6F6556B3C090F454C640477CD916E45D352
      86B2348F3E7DFA306BFD7F8B28C37F1AFF2FC53B160C3B354285289B089CAD29
      DDF6E4FE01272D385B51FEBCBAE3499A511CB6DD7C23F9BC906BBF2B71ECFDEB
      F564BF85A769F9CA368A6F1FDCCF8275E8C80E27BD285F5C36470B399FA94FBC
      F8CBC5F16D6C47F638E96339E1FC12B4A1C2CDA793FA2DE4945354A0DC5E9CFC
      62F9CAEAD5439FA9F031B17CF9987E431B7971F44D6DCDD72FBF520FF9857C79
      88F2F5F185DDDD5BEB49BBF590E78E45D38EC6430F78706C7B75E6F368A3A103
      5FEA08AF4BD011DAD0951E9D15DAB06F29CB74DF12D62722DEDC47A6E7E6DCAA
      D7C6A87E63D2A52E1CFE8572202A274AE3F2B90162F892A8DFA59ED8EFACE6B0
      19447944055C3ECB670F4AA3CF74AAFCC893105BD12787DADDBF847587E6B37F
      31EB3197FFE4B109850FE43BD51DAD99451CDBCE442D747FEF52D6012EFFC169
      2572FC0E752AA5CD3FA513A682F8CE8393CF4751BEE7D3D36E2C40A6E7960E95
      7C73159BA46F26E5B623DB3A0E2FCBDF7EEF6C6620DD715987F23A33B68C727B
      97B0CC38ECDB8D1BFF595B8E995F379B8014DB991DEA8268BF0FD457848B27CA
      2275F86ADE2DC97024DE988CED5062CB7BE590B2BB10B695A8C3FB0809170723
      E1D210019130122EB1AAD76BC2059132DC142C3757A4EFA23369ECE81B4EEC6B
      7535CEBBE2ED8EFEF848660EEBBB6EF8E79DF15E8AFD43BA3BCEBCD3617D1FAF
      23349F8CB18582BAB0F37BD1FFC9DCBDE80AD62F62EB58FDBB4B17A5B5E6689C
      F1D6077126DBCB89EA88EA19996EAF7F4EB6CF8CB7D7C7186D4E8E3EBDC43240
      6EE957F714A2F5363EADAF2A2D6DA8296F69A8294343359FAA4A41E25095FF1E
      D9FE5AF860235D1B20B7A45D5BC6186E2E6EAAAB6A69FAFC0CCD59CFD19C4DF4
      390E8D993168F810859A9450E65DF7BAD44064F9923CACA4EA021597F1F28835
      DA52D758FB052D390968CE492422DBEC7834923C1A329EA036251CAD846FC94F
      4053DE736407EBE291C62AF77FF8CDF50D15F9847F85E6DC24B4E4BE62F26ACA
      7A81C68FD1A84B8B404D5126538FE6FA6AD45614E1C985B5BCDFB08933DA585F
      E4771C85F7C4898D6494064BA3D45F1E8D9FA2D1C42BC303542707E1CB9B0034
      D45422FAD23AE637283EE9CF1CFCC96E436B49F029147A1C436B410A6109FFE0
      348AEFCAA2313D0A4D99CF983CEAD21F121F3C40534D05622FAFABFFA43B637F
      91F7A1FAE2201514BA4BA2E9430CD885A968FE188322EF6360C23D0EA322DC1A
      D4B78D1F9F32F93491368ABDB4B6BEC063DF97D2500DE4B9EE47556A34615388
      DE3365A87B1D807CF78328F25747EECDFD4C3D68399A3263D154558C589D55F5
      69AA93F6E7398AD6177A2920C75E0C8DA94F19B6F1C353E43989A12D7C2FCA83
      6DD0924DDA242BBEAD7DEBAB10A3B99CA97FB2D4D8C1EF7596B5E6B94823CB72
      3F5AF3DE22EFE6611478CA21C74E9CD43F9AB089442F499F206C561C5A9BEA11
      757A09EF373C62CE2DABFF6C75149F4DB6A03E702FB2AF6E47B6D14AD4F9EC40
      7DC0AE36F9EF24DACEA8A5B1168F4ECCE7F1516797D6D797E5A0F5C97120D509
      787F0B48B127DB6B647B95C816786703245BA339529A94BF060F6467F1F8472A
      0B6B6B4B32D9AD8FE4D0F2509649D31229D5A68712687E2889E68863E4F351B4
      4448D0BED81A26359DF71B2E11F2733E357C29AEAA2FCD6CAD2BF984BA62AA0C
      464DD5256D223E6F217D8F0CB05636BBB532E4E89FBCF5441E28CC550C97FE2B
      E281CCACB27099BFEA7992A69A591F263DA34D528C2A4224A63D0C919821F97F
      DBF3CEE4582E7C51F9A8EB351BABACE3FBD7677D0B2B3F9D3548FEC4990A4563
      2F2899DC85CCF66577BF85973BBC2F5AE9463494AE3F81ECC15DA1DFF2CCB5C2
      DAA95A8A9641A0BC84963D5B6252CFE781CF1F5821AE6FEDCC666C131D90562F
      EB8E515C2CB2CC585325E8FAD51B3566779F81CBCA583F84E89EFD119D715754
      24D6D9DF742EBE72E71F865FFBCE3B43EAAF619B3A62B5148E285CF5F99A51B4
      8D68ABB74910761F52C4D1A9AC76CF3D1C9BC51AA6B879B1BC92915BB3B4B11F
      C4356FE080BA3576A8D862839C318E28EBE0A8913FC437AF626FDC2A86A3337E
      FC9BCB5ED4BBE2ABEBF204072F7A42545AA35A6CE95831DACEB253587F484F63
      2D969CDEFBF48EE3D6382C265D28379935E6D8CC014A92734566F1EEDD8B8A9E
      3DB86387FFB1F9C35775D49E626B173E3AB46B6794DCCCF6CF74FE6FD2B96C8D
      3CED9C0BE51772B54ABB540E9566A976AEF697E50FFFE69D9368C61BB6ACDBB0
      19A3857FC7DCC973316FD23CFC317C3C668E9B811963A763C9CCA558337F0D36
      2DDB8CAD0B3640D6E032D4D3D472B9BC5A9C2A962D5F8AD3A7CE63EBB6EDF00B
      7A00794565A89E3E8B95CB9663E7CE9DF4B72AA1A4A8046529222D659C493F5D
      C2E525C8F179C9C225D8B56D372424A5B07EC37A881F3D86F5EB3630F375070E
      1EA0BF9549D7FDC529A553905695864686462D97DFE9B7136B17ADC5F62DDB98
      F9C57DFBF6E1F091C3909090809C9C1C4E282B43454515A74EA940ED841AA464
      A460916CC1BB06DD7F7F3F362FDE8CFDFBF6E3D0A1434C5925252521272B0725
      25251C3F7182B1ADA2A28233AA672021268193EF4EF2F813774E60CFEA3D3878
      F8205D5B1352C42E5D7B585E511EC7094F595555559C397306E7CE9CC39E6D7B
      70E463DB6FF0CC3F3B5F48CF4B0FFBB7EC67ECD27A4A4B4B33E5562052263CB5
      ABA6A6CA94E5D08183D8B5600764B36519FE90F1A199CEF79D21B6538C59EB58
      41418148119774F56168648CF39AE77156E33C290BF1FBF11338A5A60EF1B547
      201127C1F05B6C37EC3CEB7A1A32A23258BF763DC34B535F9F5021F53E0E3DA3
      2B3034366144F33136B784C26E39C88448638DF6CA493B9D8E9C16F5DC09B983
      D2B8A474093A64AC6BCA6BE2BCDC399C953A83D312EA503BA6CA6C4F4BAAE39C
      8C06B4F69FC5C93BAAD865BD7F87CC43636FAD221FC83F94C161729E247E571C
      123E1290F69586EC7D59C8F9C93192F59585E43D491CF33986234E07A055FC00
      52FE1AC6C75DA4DD2FDE3F0FFDA04BB8F2F00A2C1E5BC0EAA915ACA3AD611B6B
      0B9B581B46B6D1643FC606964F2D611261882B61BA90B438E4F0DF7790386BF0
      DB6CD8DCFAE94630BB38229B5D1A935AFFC9DBD9ECCCA676BF613C77F2A0DEA6
      67B732EB1128EC9DC97B5EA42064BB36326DD8EC82FBECB20F7EF579EF43BEB0
      6B3FB29BAB32EA754F1FE03DBB75F5E2FED5ADF585ECB5F3860D617F49C9DCB9
      71D15697D3C396B0938EB191A60DA3D39BDDBEEBDB6B48EF5EACBED207D7EC6F
      FE92DE5C91F7AA74FCC801CCB12A29D4402D273DAEE2D4E1BF86B3EBB2D8B3A7
      8D5951E5C9BACD7E38969DE6BBADA06FEFF6D759E1FF4F7BE70116D5B13DF0A1
      2D6D17589A888A805D2412404151B11B150C9AA851E90A4491662382C0620529
      C2425010A4B75504549018094A11C58EA2A282628B151B0828ECF9CF5C76C982
      0B117CEFFFBD97EFE977BE3BF7EEFC66CE9C3977977BEF9C73337744701BEF71
      03D6CF358777375EE1724BCB9BBB1F5BEB2F3DE4BEAB82AC28C7C0E6C3A8AAED
      08E2C6B888657C76FF89292DA3AFAB3D7BA426532678AB2BBBF1D9A577E7FE48
      BD79A928EEEA8B9B190D0E4B8D7C5E67A0871F731037C00685F7645FF3C903C4
      B9AFCA9A6D964C737D50E8CACEFDF547EAFEC7E34454D9700871E35C51C2676B
      5636E8EABDAD581FFF8BE510F586CB7E69DC47A9DCFB279DCAB925C64F1E258A
      3D3AE28DBCCE05A3989769887B6B1FAA5562748E69FA70543D8B7B662AB82FD1
      B078983FEFE9A7A26FB9172264EB3EE5226ED96E54633F13EDB49B8EF46B6351
      6B7D0682DFFC51A4C34C246F658A64AEB1D1BAC62CD476291C3D161345D2A501
      68E7C530F464F964D4FF653AE27EA3893AF2706F59823CEFC4206E5D3CE23E4C
      406D0FF0F6FE01045722D0876FB591199567360A65863BA202A73968ECF93DA8
      459AD6395E66BA2E9A17648772133D5055D41A54E1628E6255E5916E87EF0D41
      3A6A0A88CA8D25278D34FE29F94FBBDC4B9CCACB35C4E1E5178AE5C57CD1BB8B
      3DE26DD5B01CEAE139C30B2CF3BBB97729CA8B1DE2C7AD44F3624E66F0722635
      F13E7BDE35C689F7CF4DA09F8E38120E2FB70A89CB19A329DF346EB852152E7F
      2F842F1088ABA5EE6B043B1A28873B1B3E0D73369C45AD2D7436FC93BDC630BB
      1BFD1FF3E3D23AD6ADB17468987981A53A7CEDB8AD78DB8AE540D46A5D66F81A
      C3585C0E11E0F9B1B677F6B8EB2984391B1809D46BC41217BEC62088D71E1108
      7736B011E0CBF8F1637B9C0DADDA3F377C8BE555A8C70412BB4423B15106C319
      644C67D9CEE382BBE81F2818A71CB676DCD2F0B586D7F0D8F7F0EA78F33EFB64
      61323019F77D0FB77388ED6C68CFE3E902B1CEEFFB31A5BC829CF40BBD968F61
      09C47351B1310EF3872EC06C13960F588E08F80FC9BB7553538D0EBB1DF589FE
      E0F9938EA0FF909896B9E1CEE312882D84AF3F411206231483964DD7ACD61BC2
      7CE8F1C3C866E70523EA4DC6A864AE9CA33D9FBDD62006B7FB31CC79DCB388B5
      E30D853D3FEF10FC773C1EDF195CFF359E874B441FCC15B2571BCC277E817D21
      A3279EE73FC07636D8C2F39F46DC5E2EBFED407B13464F3C8B35551C8F7352C7
      FA5BE77101580FBF7FC73BC4BAFBBD282A2A12AF3D9731B6E66CDAA4AA220EFD
      8BD70A13FF75372989DE38B569BFE70C2012B3715ADBDE75936EB05DC65B77CB
      72386291AE463B63364D6B8DDF32179258DF4392FF424864594082DF0288F39E
      87DB9A0991EE1373AB8BD23E8B758C701DBF2906F715EF630689FE3F40D28E65
      90BA6B05A40558421ADEA6EE5802C9FEDF439CD76CF8D5CD244F90BD5D9C3C3A
      D2634A73F42F732172EB3248D8BE1C5203ED80B3C709B223D6404EE46AC861AF
      8243419690B2D502627F9909116B8DEC7873400B74344CF4DDBC18B6FAD9408C
      2FEE27C01E0E47BA41419C2714266D815329DEF07BDC3A381AE9089CC06590E8
      3B1FF6AE9B7C97C7CBAFF65A717749983F447B2F8294001B488DDA0087927740
      454E305CCE0B838AEC00284EDD020531AE7038D486D201DB09EE15C52B4C311C
      D56F0927ADCD3A3E0A92B72FC3FAAE86FC245F302BBA02B6576A60CDF9EBE051
      5C066EB91C088DDF05F84710D2B6FF40CDCBFD7369D3153D83874EAF7C0C56A5
      17203DC496EAA324CD071272F7C3E21B4F005D7F05F237EB6141DD3BD8F8E81D
      6CB8FD041CCB2B61F79645849F40E294169EBBD9AC71AB1E7E2AB904AE5919E0
      9D11035B4F1E8755176F83F6EDD7205EF50A7E7AF81E563D6E80757F3682DB99
      8BC4275A9F5C88A6D6E9E8A772AE9ADC794DF535B0FA3518E032A3AA9EDAE71F
      B37BD4006E9865BFF800B611DB20CAC3E452C7FDF30A8E9A05E760CBEC5BCF61
      E8ED371D1C11E68DD7E0F6A4115662DEF94903785EBD03D178FED82EE33AADC3
      C3DF09CBD76F5D050B0F6753B65874A61296965F0597C242589A9400DEF75EC2
      46DCFFD284188870338E11FA7E2AECDFD11B4C5F1FF09A03497E669082FD2DC5
      DF02FBB2395827C781C78D07E0EF69C6BE93CF96ECEE3C7878267140A4EBC4FD
      FBD64FBE8ECFA1562CB06FDD94BA48F749870D724A427BF337F5D3DF9264859D
      2B9DBF43A265A4150F644833E36BA415136A18EAF925A34C6FD65DAAFA70FA78
      E1AB9BB9F9CF48DC59B7CF0FE4D4A2CAE9CA3120A39004B20A99CD43F47EAF7E
      FAB4B9D2D6E516F41B7512249821306B01A7F9DCF967245E4ABC2BCF1C18F681
      A112FD525EFDD81D4D935AB0707B0C1597DE57AA8D2A049A622888C8ED061166
      24280D4F85FDC9776A31D329EE9BCE482E9396E4542A6A14B76A18DD86EF9C1E
      41F5BDA62A7A7F366603311B0122CA07404435054454D2619943F953C1F1D0E8
      09F5D28C649065A4D62B2865978D3639579E77EAEDF35D21E5AD5D5911954CBC
      7F0822626A2A314BFDAD20CE886912A5EF07717A1C48D0E3419291083446FCC7
      DD7BAA5F999AE77DC68A281F06A6761E54DD7A9B497829E6DEF7881E89071285
      250644701BA28C98B7522AF9F06BDCFD77CCA1593CF620C58A28E560390A3316
      5DE03634403F19A5FDCFC5E91120C688C4DC3E2CD184BF2BA59207EAA34B6107
      BBA6414A3DAB9D556E6745554F80985A3104463E8996518EAB9566A68004630F
      8833D89488C8A5BC26BCCAB01298B5B206CE9CAF7FAB675AD489151F50011BFC
      9F3C93554DBCCA503E0292F404DC4630E643DE234626482A1F0325EDD3606A79
      070A8ADF365CA9AAAFDDE05BCD95506F67691A95109DF2BA86AE967A8AD9BF10
      E8CCE3D87E6C3C8ED03F1123BD81A69479415229A5488299700DD1E33E8932E2
      AB07E99E6E58E7FFE05AC48117F78F9C6878B99BFDA891A1CE39ACAC51010AFD
      4E81B45C16D0E8EC4649F9808F34F910109723EDED0584E757849E5027D5BF00
      98C3CE425872FD07E5C15937FA0D3F572FAF91B5AFFFB05BA034A01CFB5B2496
      1090940F7A2D251FD84A93C7E3918BC0F6C473428FFD93A67A0CE4B44A41452B
      B34482990E3466F60DB551059B068DAE03299558106706617F0FA6DAA0298470
      A5E4035AC4E5C2B04D22414C2EE295B8522ED0FBA5FE21AB7800A414F681847C
      42D3C84915E6F2830F024D3912A49463414A3101FB4F1C88D2F682A8581448C8
      06B7D1E482B81272BB1B688AB167E94A816D74C55F81AE1C0832CC88DF7474AA
      90EED4272335BF7964DC4FFB9A99925AA98DAC42FE7A715ACA4E7C6EE3BFA5A3
      B390585499B874F04B5905DFFB0C25BFF7987DACA0B6A318694409CBA1206E4C
      935AB1484E69DB2A35AD83E6EA9A27A60E1D916D613A6DF3DFDDAFD64712C6D6
      52CCD2EDAADA10A4A50BE1BAC6B077C20C889DB500BCE67DFF61D332AB071626
      267385B17390E4DAF552CAEFBAB271984D5EB80C322D1D20CC7A2564FB6C6B73
      9C39DF5D901D8FC427784829BFED89CDF9D91DF2367843A4C31A4872726D31D7
      193B899FF3C05A4AE13C9F0D1C3B0102ACED1BE3B6ED7CBA70B2E9E98D5367FF
      9E8DD97CCC9EF4DB09FB56BB506DB1669B937CB552E368D24BF96C88AE11FEDE
      DF06774EFC01619E5E8778711A629BCC2C8E12B638281C0EACF3A4F449C27A99
      AA0D9E6B415766F175DEB3C29662CF2667B44DD4D3EB88D51BAF3DC2F0F8B640
      EED9BDB1703C341CF699FD488DCD4A7BF4E655FD3433F9E34DF2F683AAC347F1
      EFCDB6BB5DE34B0E787AD55D4E4E877CF65E889C368FAABF5A7364BA93E6A80C
      52DE37C30C7282C381D489DDE475BB2B8FDBBC4FDA4EF6F1A758D2A7839A2667
      C59011DE4497FDE68B21373004888EC7FC77B58ED5D0E8C8236DAAA737AE3C29
      9D4BD9C5D28E6283B47561115D9565AAAE619E64F1136593388F4D948D4EB276
      C246338B8EDC87C1EB371C246CE216166563C2EEC03627B627791AFC67995791
      3989FED98562C95C1D7274E1AE359996F5B3994545FAAE2088B07380003CB77C
      769534F3A23A2F4E7EBECED869C94E6E6F2257ADA158D216D187F80E191B7FBC
      8425734DFC7402929E286823871973DC727CB73505AFB0EB9995566EC0BEEE2E
      EC1C583E7DF69480D56BCBB79A2D6C8D15C2AEA031CBC7A3BF9E5D74734D2E62
      BB68F1724BE349C7AD070F2F5DA9A675889CCB4634294BFEF5ED3F4D9C7ED102
      2C2D54D953AB96B77FAF17FC53C208EC7305F77BA10374D9E7F6A18D4F9DF637
      6BDE6D1F9776B6D366AD82AE22AC8DEEC6C1D75150BA1B07FFFA90B7DFD69B31
      08941B05FABAD57E4CFB112EBFE18B90BEDBBAEC37119B7469F7339ECCBFB0B1
      76D9179A6F1BDBF6A230BD85DB46F3FA3FF11CFA36B38EB6E87075DFD7D166DE
      8D41973FF6999F9E510952150083529F15F785A7EFBB0BF45CCC2737805AFA33
      FBDEF2FD73DA40E13800FD602BA8257141F3C84BF3EF4EBC30FD2CA66BF7B571
      8ABBAEA60ED95CD269AC537F6B02C9B256102B6B03F9DFDB40248F0B0A1C00FD
      D033E09C7AA77878DCEDDF47709E835A3E17A4B703D885D43408F212975AD2D0
      65F29001CB0DB228A6052422EF00934392CA92051E80F50218E5D2064317D536
      75FAED39F76483F4351E77E113889C6D0354F027A8E47E0005CC0EC96B83E901
      AD30C4AE09467D771F3E7FE7FD3D40F61CA061CF96C057368C2B98C75BD1CB5C
      902C68836F425AC0C4B61946FD7453E8FCCADC68B9281D5A0A22B7C8C5781B0C
      E4D401AAF848B5A7C3063071FD003A733FC2B4D585C1C2788B938F0CC9B8652F
      B602734709C86CCE0784BB92C0FDABE7B4829E7B338C31AE037D97EBA29FBDE3
      7AF7696C2BB28810DAB7558D802EBF01B2BA54B2F0158C3AD10C9A4B008C665C
      16AABBC1D9578E4A379B41E46203D0CFBE876F4F35C3B0B277201E5A0EF23B8A
      607C441B0C9BD40C73DC8A32BEC48FBE2B793350A7AAF582FE330043ECC9C37F
      7C0D3A0B4A7AF59D31EF72EB75A38C26305C7B1F8C579F77EFAD2F5B70EE6E35
      65DD72FC2FCD47D8AB1806617CEFBAEC99EFA9BD9EFAEFACA330BDFF9E17B6FD
      FCD8BF8FFF1AFDBFC6FE5F33FF7FE7537DF1C59EF4EB89FD9A73A02FBAF5A65F
      8AA7DE7EF59F79EEF7695E04FFFFCDDCFC2B78C13A5FCAF7E43F5FEA57ED719D
      BDF7E7AFE5FFD2AF9D873EF1D027BE73DF7DE5A14FFCE77DF785873EF1C2D9BE
      F05FFCFB692CF0CCB66B5EDE815FD09F4797FCD182B9548D7B315F6704588F3E
      F83947805FFC3FFE7FFCFF174FCE132C0F04784E1FFBED2A8BBF80FFAAF3772A
      62892F47DE832D91577F5BC452B0415B863822968C35F21E608F36315C908BA4
      35F2F5B3412C8E2DF2D11564ED114B7D31F29016BC17C942AC8E6BB615882567
      8D58ABAC911FF0A49CFF992DDA328CDF3F6E7FA315F22BC275DF6169C0F54EDB
      20DFCD8EC85102F7EBF817CFA29E015BA12D5AFC36F0B10B02ED0B08EB39962B
      36C8C7C006F9EDC1ED9CB0423E46644C549C1462D170BD6BDDB096D47D55C432
      C6E5EB782B658536C8129BE032B5161D1F670967FD3AE5BBC2F54E620968D77B
      83AC1DF21ED47EDCAFBA9BBEB97CDBB4F7C97A838F53710BBC3992C2BAD3F1B1
      369EBDEA85B44198642C8FF9C7562296E232E4D58FCC2F9E376D5EBDB3580A78
      E566BC6DC1D288CBAD641C3CA1783C97A349BF644E17A3C562F8585317FE146F
      3F03EF9FB342AC503CAF4EB8FC89B447FC888C0B1FA7F23BE2F928EECCFB95E0
      72299604325778EB85C59EE885990ABE3D88AF12BFB0443E93C9FC613FF120F6
      25BE813957E24BF878A115F275C6B21E976FE2CF66B6DBDC9B5A93EF883CE5DB
      75F00BEC660E056DC916F4572AFE006D56E1FB39E907D77B2B84C37EECEBC9AF
      DFF5591AB103DF17C9F986C7B102732144F038AC89ADDBCFB14D0C62F37FD51A
      A02FFC4E52111515F5111317CF31993D73CF9C1F7FA8D23731B9AAA8ACECFF37
      9CEA006DED74F7EDDB3E655CAD84B063F9E0577A057E3E5E0ECEC7CF80CEA449
      91DD7064DD9AA9E9BC7977932BAB607DE17970CC2B03DBECD360935B4289D694
      996F84AD4B24B99B070D195233C6D0F0634AD52DB03B52025649B930DD7B1758
      1E3C49B1C63FAF27799AA70B6175F52618D7275FBD0E07EFDE07879C533072D6
      7C18EFE046718BA2336080BE31791780BE10B6FF5863E3A799B76B61E551AC6B
      C671501BA3077303A23A74365EBD9E7A17A3B0F162FBB2F716FE01F6474B6155
      FA31186434099624E6529CE5C14218BD600917898A6E16662F9AA4E4310B5B9B
      669F92CBB026E70F1834DEA463ACE661F1C0D41A4AF2E15B74976B7F8195655B
      C1BD5A70C92B05ED89A6B03CE337B0C9290643DB35204693CCC175D47B9863F5
      B94B9740F6CD5B30D4D0087E8CCB02EB9CD3A03D6516F930E20B7C6BB892AAEA
      536C773072F200ABC3453071AD27C80F1C7CB5A77EBBE4AC27EB4B81D17FE007
      1925D55CDEBB2E25BFD0B7E57879C2C93B0A66F5E1EF845FC8BB34BFE29A97BC
      4F61D057F05F75CDFD7F3778CF1C
    }
  end
  object mnuMain: TMainMenu
    Images = imlMain
    Left = 463
    Top = 81
    object mnuFile: TMenuItem
      Caption = '&File'
      object mniNew: TMenuItem
        Action = actFileNew
      end
      object mniFileOpen: TMenuItem
        Action = actFileOpen
      end
      object MenuItem2: TMenuItem
        Action = actFileImport
      end
      object mniSepItem1: TMenuItem
        Caption = '-'
      end
      object miCompact: TMenuItem
        Caption = '&Compact'
      end
      object mniSepItem2: TMenuItem
        Caption = '-'
      end
      object mniExit: TMenuItem
        Action = actFileExit
      end
    end
    object mnuEdit: TMenuItem
      Caption = '&Edit'
      object mniEditNew: TMenuItem
        Caption = 'New'
        object mniFolderNew: TMenuItem
          Action = actFolderNew
        end
        object mniFolderRootNew: TMenuItem
          Action = actFolderRootNew
        end
        object mniSnippetNew: TMenuItem
          Action = actSnippetNew
        end
      end
      object mniSepItem6: TMenuItem
        Caption = '-'
      end
      object mniDelete: TMenuItem
        Action = actDelete
      end
      object mniSepItem: TMenuItem
        Caption = '-'
      end
      object mnuEditCopy: TMenuItem
        Action = actEditCopy
      end
      object mnuEditCut: TMenuItem
        Action = actEditCut
      end
      object mnuEditPaste: TMenuItem
        Action = actEditPaste
      end
      object mnuEditUndo: TMenuItem
        Action = actEditUndo
      end
    end
    object mnuOptions: TMenuItem
      Caption = 'Options'
      object mniSettings: TMenuItem
        Action = actSettings
        OnClick = actSettingsExecute
      end
    end
    object MenuItem1: TMenuItem
      Action = actFileExit
      RightJustify = True
    end
  end
  object shlPascal: TSynFreePascalSyn
    Tag = 1
    Enabled = False
    CommentAttri.Foreground = 10658466
    KeyAttri.Foreground = clNavy
    NumberAttri.Foreground = clBlue
    StringAttri.Foreground = clBlue
    DirectiveAttri.Foreground = clTeal
    DirectiveAttri.Style = []
    CompilerMode = pcmObjFPC
    NestedComments = True
    TypeHelpers = False
    StringMultilineMode = []
    Left = 449
    Top = 159
  end
  object shlVB: TSynVBSyn
    Tag = 2
    Enabled = False
    CommentAttri.Foreground = 10658466
    KeyAttri.Foreground = clNavy
    NumberAttri.Foreground = 4227327
    StringAttri.Foreground = 4174598
    SymbolAttri.Foreground = 10637649
    Left = 475
    Top = 159
  end
  object shlSQL: TSynSQLSyn
    Tag = 3
    DefaultFilter = 'SQL Files (*.sql)|*.sql'
    Enabled = False
    CommentAttri.Foreground = 10658466
    KeyAttri.Foreground = clNavy
    NumberAttri.Foreground = 4227327
    StringAttri.Foreground = 4174598
    SymbolAttri.Foreground = 10637649
    SQLDialect = sqlStandard
    Left = 449
    Top = 224
  end
  object shlPython: TSynPythonSyn
    Tag = 4
    DefaultFilter = 'Python Files (*.py)|*.py'
    Enabled = False
    CommentAttri.Foreground = 10658466
    KeyAttri.Foreground = clNavy
    NumberAttri.Foreground = 4227327
    StringAttri.Foreground = 4174598
    SymbolAttri.Foreground = 10637649
    Left = 501
    Top = 159
  end
  object shlPHP: TSynPHPSyn
    Tag = 5
    DefaultFilter = 'PHP Files (*.php,*.php3,*.phtml,*.inc)|*.php;*.php3;*.phtml;*.inc'
    Enabled = False
    CommentAttri.Foreground = 10658466
    KeyAttri.Foreground = clNavy
    NumberAttri.Foreground = 4227327
    StringAttri.Foreground = 4174598
    SymbolAttri.Foreground = 10637649
    VariableAttri.Foreground = clNavy
    Left = 527
    Top = 159
  end
  object shlPerl: TSynPerlSyn
    Tag = 6
    DefaultFilter = 'Perl Files (*.pl,*.pm,*.cgi)|*.pl;*.pm;*.cgi'
    Enabled = False
    CommentAttri.Foreground = 10658466
    KeyAttri.Foreground = clNavy
    NumberAttri.Foreground = 4227327
    StringAttri.Foreground = 4174598
    SymbolAttri.Foreground = 10637649
    Left = 554
    Top = 159
  end
  object shlJava: TSynJavaSyn
    Tag = 7
    DefaultFilter = 'Java Files (*.java)|*.java'
    Enabled = False
    CommentAttri.Foreground = 10658466
    KeyAttri.Foreground = clNavy
    NumberAttri.Foreground = 4227327
    StringAttri.Foreground = 4174598
    SymbolAttri.Foreground = 10637649
    Left = 581
    Top = 159
  end
  object shlBAT: TSynBatSyn
    Tag = 8
    DefaultFilter = 'MS-DOS Batch Files (*.bat;*.cmd)|*.bat;*.cmd'
    Enabled = False
    CommentAttri.Foreground = 10658466
    KeyAttri.Foreground = clNavy
    NumberAttri.Foreground = 4227327
    Left = 610
    Top = 159
  end
  object shlCPP: TSynCppSyn
    Tag = 9
    DefaultFilter = 'C++ Files (*.c,*.cpp,*.h,*.hpp,*.hh)|*.c;*.cpp;*.h;*.hpp;*.hh'
    Enabled = False
    CommentAttri.Foreground = 10658466
    KeyAttri.Foreground = clNavy
    NumberAttri.Foreground = 4227327
    StringAttri.Foreground = 4174598
    SymbolAttri.Foreground = 10637649
    Left = 639
    Top = 159
  end
  object pmnuTree: TPopupMenu
    OnPopup = pmnuTreePopup
    Left = 524
    Top = 80
    object MenuItem3: TMenuItem
      Caption = 'New Item1'
    end
  end
  object shlMultiHl: TSynMultiSyn
    Enabled = False
    Schemes = <    
      item
        StartExpr = '<Bat>;<Bat'
        EndExpr = '</Bat>;/>'
        Highlighter = shlBAT
      end    
      item
        StartExpr = '<CPP>;<CPP'
        EndExpr = '</CPP>;/>'
        Highlighter = shlCPP
      end    
      item
        StartExpr = '<Java>'
        EndExpr = '</Java>'
        Highlighter = shlJava
      end    
      item
        StartExpr = '<Pascal>'
        EndExpr = '</Pascal>'
        Highlighter = shlPascal
      end    
      item
        StartExpr = '<Perl>'
        EndExpr = '</Perl>'
        Highlighter = shlPerl
      end    
      item
        StartExpr = '<?PHP'
        EndExpr = '?>'
        Highlighter = shlPHP
      end    
      item
        StartExpr = '<Python>'
        EndExpr = '</Python>'
        Highlighter = shlPython
      end    
      item
        StartExpr = '#!/bin/bash'
        EndExpr = '</Bash>'
        Highlighter = shlShellScript
      end    
      item
        StartExpr = '<SQL>'
        EndExpr = '</SQL>'
        Highlighter = shlSQL
      end    
      item
        StartExpr = '<IngreSQL>'
        EndExpr = '</IngreSQL>'
      end    
      item
        StartExpr = '<IBSql>'
        EndExpr = '</IBSql>'
        Highlighter = shlSqlInterbase
      end    
      item
        StartExpr = '<MSSQL>'
        EndExpr = '</MSSQL>'
        Highlighter = shlSqlMsSql2000
      end    
      item
        StartExpr = '<MySQL>'
        EndExpr = '</MySQL>'
        Highlighter = shlSqlMySQL
      end    
      item
        StartExpr = '<OracleSql>'
        EndExpr = '</OracleSql>'
        Highlighter = shlSqlOracle
      end    
      item
        StartExpr = '<SybaseSql>'
        EndExpr = '</SybaseSql>'
      end    
      item
        StartExpr = '<VB>'
        EndExpr = '</VB>'
        Highlighter = shlVB
      end>
    DefaultHighlighter = shlPascal
    DefaultLanguageName = 'Pascal'
    Left = 406
    Top = 190
  end
  object shlSqlInterbase: TSynSQLSyn
    Tag = 10
    DefaultFilter = 'SQL Files (*.sql)|*.sql'
    Enabled = False
    CommentAttri.Foreground = 10658466
    KeyAttri.Foreground = clNavy
    NumberAttri.Foreground = 4227327
    StringAttri.Foreground = 4174598
    SymbolAttri.Foreground = 10637649
    SQLDialect = sqlInterbase6
    Left = 475
    Top = 224
  end
  object shlSqlMsSql2000: TSynSQLSyn
    Tag = 12
    DefaultFilter = 'SQL Files (*.sql)|*.sql'
    Enabled = False
    CommentAttri.Foreground = 10658466
    KeyAttri.Foreground = clNavy
    NumberAttri.Foreground = 4227327
    StringAttri.Foreground = 4174598
    SymbolAttri.Foreground = 10637649
    SQLDialect = sqlMSSQL2K
    Left = 501
    Top = 224
  end
  object shlSqlMySQL: TSynSQLSyn
    Tag = 13
    DefaultFilter = 'SQL Files (*.sql)|*.sql'
    Enabled = False
    CommentAttri.Foreground = 10658466
    KeyAttri.Foreground = clNavy
    NumberAttri.Foreground = 4227327
    StringAttri.Foreground = 4174598
    SymbolAttri.Foreground = 10637649
    SQLDialect = sqlMySQL
    Left = 528
    Top = 224
  end
  object shlSqlOracle: TSynSQLSyn
    Tag = 14
    DefaultFilter = 'SQL Files (*.sql)|*.sql'
    Enabled = False
    CommentAttri.Foreground = 10658466
    KeyAttri.Foreground = clNavy
    NumberAttri.Foreground = 4227327
    StringAttri.Foreground = 4174598
    SymbolAttri.Foreground = 10637649
    SQLDialect = sqlOracle
    Left = 557
    Top = 224
  end
  object shlShellScript: TSynUNIXShellScriptSyn
    Tag = 16
    DefaultFilter = 'UNIX Shell Scripts (*.sh)|*.sh'
    Enabled = False
    CommentAttri.Foreground = 10658466
    NumberAttri.Foreground = 4227327
    StringAttri.Foreground = 4174598
    SymbolAttri.Foreground = 10637649
    Left = 667
    Top = 159
  end
  object SynAnySyn1: TSynAnySyn
    Enabled = False
    CommentAttri.Foreground = 12697535
    CommentAttri.Style = []
    Comments = []
    DetectPreprocessor = False
    IdentifierChars = '!"#$%&''()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~'
    KeyAttri.Foreground = clNavy
    KeyAttri.StyleMask = [fsBold]
    ConstantAttri.Style = []
    ObjectAttri.Foreground = clBlue
    ObjectAttri.Style = []
    VariableAttri.Foreground = clFuchsia
    VariableAttri.Style = []
    KeyWords.Strings = (
      'ABSOLUTE'
      'ABSTRACT'
      'ALIAS'
      'AND'
      'ARRAY'
      'AS'
      'ASM'
      'ASSEMBLER'
      'BEGIN'
      'BREAK'
      'CASE'
      'CDECL'
      'CLASS'
      'CONST'
      'CONSTRUCTOR'
      'CONTINUE'
      'CPPDECL'
      'DEFAULT'
      'DESTRUCTOR'
      'DISPOSE'
      'DIV'
      'DO'
      'DOWNTO'
      'ELSE'
      'END'
      'EXCEPT'
      'EXIT'
      'EXPORT'
      'EXPORTS'
      'EXTERNAL'
      'FALSE'
      'FAR'
      'FILE'
      'FINALIZATION'
      'FINALLY'
      'FOR'
      'FORWARD'
      'FUNCTION'
      'GOTO'
      'IF'
      'IMPLEMENTATION'
      'IN'
      'INDEX'
      'INHERITED'
      'INITIALIZATION'
      'INLINE'
      'INTERFACE'
      'IS'
      'LABEL'
      'LIBRARY'
      'LOCAL'
      'MOD'
      'NAME'
      'NEAR'
      'NEW'
      'NIL'
      'NOSTACKFRAME'
      'NOT'
      'OBJECT'
      'OF'
      'OLDFPCCALL'
      'ON'
      'OPERATOR'
      'OR'
      'OUT'
      'OVERRIDE'
      'PACKED'
      'PASCAL'
      'PRIVATE'
      'PROCEDURE'
      'PROGRAM'
      'PROPERTY'
      'PROTECTED'
      'PUBLIC'
      'PUBLISHED'
      'RAISE'
      'READ'
      'RECORD'
      'REGISTER'
      'REINTRODUCE'
      'REPEAT'
      'RESOURCESTRING'
      'SAFECALL'
      'SET'
      'SHL'
      'SHR'
      'SOFTFLOAT'
      'STDCALL'
      'THEN'
      'THREADVAR'
      'TO'
      'TRUE'
      'TRY'
      'TYPE'
      'UNIT'
      'UNTIL'
      'USES'
      'VAR'
      'VIRTUAL'
      'WHILE'
      'WITH'
      'WRITE'
      'XOR'
    )
    Objects.Strings = (
      'CLASS'
      'DOUBLE'
      'INTEGER'
      'SINGLE'
      'STRING'
      'TOBJECT'
      'WORD'
    )
    NumberAttri.Foreground = clMenuHighlight
    PreprocessorAttri.Foreground = clRed
    StringAttri.Foreground = 8103998
    StringDelim = sdDoubleQuote
    Markup = False
    Entity = True
    DollarVariables = False
    ActiveDot = False
    Left = 696
    Top = 288
  end
end
